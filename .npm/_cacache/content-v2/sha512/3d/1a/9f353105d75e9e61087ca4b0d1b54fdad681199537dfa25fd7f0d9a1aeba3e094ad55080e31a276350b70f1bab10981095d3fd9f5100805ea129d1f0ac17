{"_id":"ethereum-cryptography","_rev":"39-8ef9d06aab999cbe6204bf7a63815057","name":"ethereum-cryptography","description":"All the cryptographic primitives used in Ethereum","dist-tags":{"latest":"2.2.1"},"versions":{"0.0.1":{"name":"ethereum-cryptography","version":"0.0.1","keywords":["ethereum","cryptography"],"author":{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},"license":"MIT","_id":"ethereum-cryptography@0.0.1","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"homepage":"https://github.com/alcuadrado/ethereum-cryptography#readme","bugs":{"url":"https://github.com/alcuadrado/ethereum-cryptography/issues"},"dist":{"shasum":"4df4b6a8ea7276d3f7f548a1f8e6fdb18f6be9cd","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.0.1.tgz","fileCount":17,"integrity":"sha512-M6aawT9Xtvv2xnUSm+TYgIxwLH1Lo6Ujp6Xmwqv0uzBHUPxgvoAwnbTFIeRhWyCG+L1jWqB2QQy9RQ5mHzE8Sw==","signatures":[{"sig":"MEYCIQDwDscVUJvkZaJ6p2CcZdkGDwPefo8rqquuSgKCBITlmgIhAIzHjk1i+7mt7HjLVhy2Czvr/DbhFMCcY/QW2Qt0t4lg","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":7574,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdcCdCCRA9TVsSAnZWagAA0kgP/iuRQGYrcEgUNRiat4AJ\nbs4iY7tXdiQdaGzL+TFkTgLCsORzUuHBLe0DKn+RZRsXQg86LTB68hzQ+4i1\n4j910LOPS1tCs9C53UCX4FLGKasfxDzOSBzzRNdYZ14S1SPFMytuRK3V0+W6\nS7f+DUcKzKh8LWjtuzOcLlxLrER+lf5LDk81YEauE3qFDv/+OTmGFILVh1Cj\nlScUcxUk3DKGmicXM3BInUgkkDINoywaRKmChtwlNvLIlYrIrW6JFsWHvUUH\noUlEP1VGDIhfRdgNMCBhNiGn76E0QfYjq2TayY36D626zNqX0de2+rDz0dMZ\nNCe/oQxdPfuF2FxyGp5aZNz2DOXVgYjuJDPG67MjXUPKTNSukcPEZUNPR7bD\n7Uc85FCD+KmA5dows5V9tUs6GgKKu+uRCq2QG8QEjEafoS9OYbsxxENoPHIC\nQl4ME3UsMQx595exb4RrLfUGbTnFFzFVQOfuuPw89NAeBH99Lw7cyDN65APg\nipQtIHaM3rj1LAzQ2yUrJxmLjCA98QTvvLWT3tDK7wYrVI3peJc/sngE4g1g\n5AnGr4Lxqdyj/dcAM4TCjN8wlkVapWobFIAZhrxPnUa2xN1wjQAlJGRe+cVb\nXl84jb04i7pSG+BF/HHBobyLsw9TaUhtUdzH0QjJy+AutGECMsV96Hgpwk+s\nVuXA\r\n=0AKT\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","types":"index.d.ts","browser":{"./keccak.js":"./pure/keccak.js"},"scripts":{"lint":"tslint --project tsconfig.json","test":"mocha","build":"tsc --project tsconfig.prod.json","clean":"rimraf pure '*.js' '*.js.map' '*.d.ts' '*.d.ts.map'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/alcuadrado/ethereum-cryptography.git","type":"git"},"_npmVersion":"6.11.2","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"8.16.0","dependencies":{"js-sha3":"^0.8.0"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","mocha":"^6.2.0","rimraf":"^3.0.0","tslint":"^5.19.0","ts-node":"^8.3.0","prettier":"1.18.2","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","@types/mocha":"^5.2.7","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.0.1_1567631170217_0.07610878550544609","host":"s3://npm-registry-packages"}},"0.0.2":{"name":"ethereum-cryptography","version":"0.0.2","keywords":["ethereum","cryptography"],"author":{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},"license":"MIT","_id":"ethereum-cryptography@0.0.2","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"homepage":"https://github.com/alcuadrado/ethereum-cryptography#readme","bugs":{"url":"https://github.com/alcuadrado/ethereum-cryptography/issues"},"dist":{"shasum":"ce064af3392493307f034bc3d55241496009e47d","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.0.2.tgz","fileCount":18,"integrity":"sha512-c4aFCDvoOKRia/tcB/FHdKyhBc5SBK3zdCju4JRDoFHyKgiqUOwZJNHm1hY33dnZlLzIJ4R03Rf9j1uAt8jwyA==","signatures":[{"sig":"MEUCIQCEiL5uucaBsiUhr0YXB8XWtIpy41Zfg4CB9Z1YfC0DRgIgLvoJF1VpvCtdaylbf890hK6BY7jfIGUvzM6pTgFPezc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":9810,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdcCgNCRA9TVsSAnZWagAAwA8P/2PEAvAYfKCI2EYjy4hV\nJnCv//fPrUfMmQ0gOd3BYFippw9mKGYUBGCMsvQXW26+sEjvoAfTwTxLm6AE\nSKEXZZkFTwNEHVKH41vDC9XQoNSOV348qQ1osAHCJPHFZabWE5frZp4O+moQ\nGspKWDLVDX+sJYO5HMVkx4pB0pQMWeFbt+gWKU+MnyvcDsJ0FydHaFpnrDCQ\npUR/Xhw99LcVCLzYUvn4UGxwsOdtZ70e6aWT5X7dgXCbjLoIdlezzknkAHK9\nGj8N003ySQPzGLxnRGqL0VLdArIugHh0958AH88taUZTfjs64qTR3uQFzyPM\nPOfiUcTcCaPHk/w6cYWstEUXAXGbAFgyYTeTSd9+x3aRaTK13pg8YEdAE+ND\nUMceohHs/jaqFs6yjK+kbDCU4noY01jOo3oEqQkPecuV2Qya1qWPBuL968OK\n6TH/pjoGlhm1LKjTzPr43OeZX5+/N1LR+OJUPv41iucH7quLBJH5hVpl6ruo\njRmlJjSTEin0TRUVsjw8gsoBC4TJ/Lt24A3EfHtiu2iJPKbdm8LcVZtUbRrv\nhSPjyjtXFrpIc6D+NxjG2Cy4eun6xLGpbGxSp0xD2D+K1gMW2IvRLI+HrR3A\nHaL4ZqS1oYVIOpcMo8fOPHwsx/480QcCqfPnxARXgRyu+5aZK7CamPPSNPvj\nZGVl\r\n=4sQt\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","types":"index.d.ts","browser":{"./keccak.js":"./pure/keccak.js"},"scripts":{"lint":"tslint --project tsconfig.json","test":"mocha","build":"tsc --project tsconfig.prod.json","clean":"rimraf pure '*.js' '*.js.map' '*.d.ts' '*.d.ts.map'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/alcuadrado/ethereum-cryptography.git","type":"git"},"_npmVersion":"6.11.2","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"8.16.0","dependencies":{"js-sha3":"^0.8.0"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","mocha":"^6.2.0","rimraf":"^3.0.0","tslint":"^5.19.0","ts-node":"^8.3.0","prettier":"1.18.2","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","@types/mocha":"^5.2.7","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.0.2_1567631373181_0.24170071271634241","host":"s3://npm-registry-packages"}},"0.0.3":{"name":"ethereum-cryptography","version":"0.0.3","keywords":["ethereum","cryptography"],"author":{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},"license":"MIT","_id":"ethereum-cryptography@0.0.3","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"homepage":"https://github.com/alcuadrado/ethereum-cryptography#readme","bugs":{"url":"https://github.com/alcuadrado/ethereum-cryptography/issues"},"dist":{"shasum":"4d5fdb34cd40b40e0ffb7cdacca569fb2c3b4d58","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.0.3.tgz","fileCount":60,"integrity":"sha512-fyCRauIDb0Jn+9SiQuhlBSTus0izZTQOyhCYm06dIYJOmsAOICBkXkpZy8icS7wGinzEGsOyPFMQVB8oghJU5w==","signatures":[{"sig":"MEUCIDKNyGwBGGs8GULw6ZcHIOV/89sdi41ZNVYTJQFaFWJ/AiEAlfNy9Z1VpeEZ+yG4QmSjvhNLeTH/DssC1/YJsemRYLU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":112418,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdcshqCRA9TVsSAnZWagAAm10QAIBCvrqqHtyhXvyJqeZd\nYWz5hqfLZ/oxYhY6SrN2cbzXyoqJWtx+h54gkD7Apea7gx0AJ8Gj1YRs6Jyh\n5ruJgBahWJK36NPV8Qt1sIMmRXjVvweexKaQAkPp8P+3VmfqaQAK+77PI6wj\ne7upxAtXx61J+SjD5NkfCbOY8PQN8phs7gCGQ28LPuze4UF1S+E4HZaZmZp8\nawkA2BpCQij0RJOm7FmwyHJEAxL9zpyEmHT/uTdksbEssz8CTldkjHF/2q4b\nm5+eBVqHWV8divoB0D5b8CCvPjHsZgJ+WmBKrqNC1DS4Hipa3kceLxg4v0ij\nyzlFQVY4Q+3MIOl3xg3swWVl367sOSYThCb/UrVG+kJ1lPptd0HuouJ8JFiN\nrC12tSKyqKwv3lXB+LSfz5fO7CRpxPTM4ro8SPFl7GQfCmWd/E33Lm0PkoBv\nxihuTRXxkiCYo31H/XGnfWGDiNbvOojkq0ZM6gEemasfrm59l+cLE4l8doaT\nsyqREMZJMtceAHMhlxfcqz1+BTvWaW60YjwDL6JapbyumBKYR4XmjTuzGbwh\nPPMSe9tyzCOYqt3ytNNcf8CANOtGq22FmlXZh1f0AQMzpY2WQALt6phqF8sE\nYEAnd5b88OIFwjdyoSvtdODz7vTN73Yd5iTczTrJXHLZtfSJTvJESoRmcdaI\n9mbH\r\n=FFD3\r\n-----END PGP SIGNATURE-----\r\n"},"main":"index.js","types":"index.d.ts","browser":{"./keccak.js":"./pure/keccak.js","./scrypt.js":"./pure/scrypt.js"},"scripts":{"lint":"tslint --project tsconfig.json","test":"mocha","build":"npm-run-all elliptic-build build:tsc elliptic-copy","clean":"rimraf test-builds pure '*.js' '*.js.map' '*.d.ts' '*.d.ts.map'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","browser-tests":"npm-run-all browser-tests:build browser-tests:test","elliptic-copy":"cp src/elliptic-secp256k1.js ./","elliptic-build":"rollup -c elliptic-secp256k1-config/rollup.config.js","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ../../scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/alcuadrado/ethereum-cryptography.git","type":"git"},"_npmVersion":"6.11.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"8.16.0","dependencies":{"bip66":"^1.1.5","bn.js":"^4.11.8","hash.js":"^1.1.7","js-sha3":"^0.8.0","elliptic":"^6.4.1","scrypt-js":"^2.0.4","create-hash":"^1.2.0","safe-buffer":"^5.1.2","@types/secp256k1":"^3.5.0"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.0.3_1567803497769_0.06525801124657638","host":"s3://npm-registry-packages"}},"0.0.4":{"name":"ethereum-cryptography","version":"0.0.4","keywords":["ethereum","cryptography"],"author":{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},"license":"MIT","_id":"ethereum-cryptography@0.0.4","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"homepage":"https://github.com/alcuadrado/ethereum-cryptography#readme","bugs":{"url":"https://github.com/alcuadrado/ethereum-cryptography/issues"},"dist":{"shasum":"0fd116d83837f1e424532e748e825f72cf651a89","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.0.4.tgz","fileCount":130,"integrity":"sha512-o/fgteAW4ga8otFh3iDn/0IOl5cCY+21oz5dBnNuA9iDryxDfuu01AsVx0gZlz/LycvqYbtuEJ/vvMxLvKwA9Q==","signatures":[{"sig":"MEUCIQD7HNlmyFv+Ozy6I32g6l6YcpFMDhoynmtc5Yjf3CWuTwIgdwZPDoXIodB+Sr1tNEarD51EF4j9lFytPDiMfEsOkSU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229413,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJddW5TCRA9TVsSAnZWagAAUSMP+wcpWly+6BL/NQW7SNWO\nZFY3O0HV332rfRjLyr+3+r2snmQ6hQVp7ZIiEQqKNTJCGIM6XqRVOfbjXNhA\nAd6M73cqC9bMCHsGEEgVzXS/PsI3so4xoRi1qfvOT2fJ7MNMIYVO0W+N17YP\npf3TAFxnf0kHhOZKbAZyZgpE/JPjTz5AqhyzzjUOjvXGTvCbLZCWQirsB8x6\nCc9BSzpK+Rq/eEic7JAwUq9zTJVYCaqFDCPWUH4R0/fiW/q+sPuSVGBZykVv\n/gpjyuIDo2ePi6dqs61HlbZKSthZN98J6UsSfyiYcQsWciwSzYOSbj3ga7Mv\nw+0bJJDuNouhzlEdC1PZqw+kqkRzEq74cMcn7P/Lz0FKTsbW7jVBDYxyWPZy\nZBS0k0OEo2phX4glQwMRht6n3VT3Jy3nMDhurhbL/pS0XH2aUCp8HnjXK2JW\nc8XzbvZaxH+xPkKZCjVi/OXwNx4LoUg/bcOLKf5utqMdJqaeVpTZyGQFYvW/\ndvXiY0CG97dMayIkExthkbc5dYG/Jt93ej9k01+4m/9cIXq0JqLje/QI/0Gf\nOQqScOqDUSx4zkDhoKZjMsre34MIrOYDWoEhYFk4ruelxVd7SrGlR/20XoKu\nHJJTU+AWcK0ZgR9jTGVgMvceyFap6aG9/J6h/J+DVR7dEAZCUPWrfXYUF/TF\nmfE2\r\n=2Gmv\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"./aes.js":"./pure/aes.js","./hdkey.js":"./pure/hdkey.js","./keccak.js":"./pure/keccak.js","./pbkdf2.js":"./pure/pbkdf2.js","./random.js":"./pure/random.js","./scrypt.js":"./pure/scrypt.js","./sha256.js":"./pure/sha256.js","./blake2b.js":"./pure/blake2b.js","./ripemd160.js":"./pure/ripemd160.js","./secp256k1.js":"./pure/secp256k1.js"},"scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all elliptic-secp256k1:build scryptsy-without-crypto:build hdkey-without-crypto:build test:node","build":"npm-run-all build:tsc elliptic-secp256k1:build elliptic-secp256k1:copy scryptsy-without-crypto:build scryptsy-without-crypto:copy hdkey-without-crypto:build hdkey-without-crypto:copy","clean":"rimraf vendor test-builds pure shims scryptsy-without-crypto-build hdkey-without-crypto-build '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","elliptic-secp256k1:copy":"mkdir -p vendor && cp src/vendor/elliptic-secp256k1.js ./vendor","elliptic-secp256k1:build":"rollup -c elliptic-secp256k1-config/rollup.config.js","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","hdkey-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","hdkey-without-crypto:build":"bash -x scripts/build-hdkey-without-crypto.sh","scryptsy-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/scryptsy-without-crypto.js ./vendor && cp src/pure/vendor/scryptsy-without-crypto.js ./pure/vendor","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js","scryptsy-without-crypto:build":"bash -x scripts/build-scryptsy-without-crypto.sh"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/alcuadrado/ethereum-cryptography.git","type":"git"},"_npmVersion":"6.11.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"8.16.0","dependencies":{"bip66":"^1.1.5","bn.js":"^4.11.8","pbkdf2":"^3.0.17","blakejs":"^1.1.0","hash.js":"^1.1.7","js-sha3":"^0.8.0","elliptic":"^6.4.1","bs58check":"^2.1.2","create-hash":"^1.2.0","create-hmac":"^1.1.7","randombytes":"^2.1.0","safe-buffer":"^5.1.2","setimmediate":"^1.0.5","@types/pbkdf2":"^3.0.0","browserify-aes":"^1.2.0","@types/secp256k1":"^3.5.0"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","rollup-plugin-alias":"^2.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.0.4_1567977042702_0.7052993968283567","host":"s3://npm-registry-packages"}},"0.0.5":{"name":"ethereum-cryptography","version":"0.0.5","keywords":["ethereum","cryptography"],"author":{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},"license":"MIT","_id":"ethereum-cryptography@0.0.5","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"homepage":"https://github.com/alcuadrado/ethereum-cryptography#readme","bugs":{"url":"https://github.com/alcuadrado/ethereum-cryptography/issues"},"dist":{"shasum":"61874645248bb1beb3bfa4e73aad489905615caf","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.0.5.tgz","fileCount":130,"integrity":"sha512-uWgIFwSl3FotNl22Hr7tOcPI5KmrNM2AOrRU3NJqz3fRKZhoqk+1jLp+yNq6sdrnuvDdsKigkfv8g6BI2+liVg==","signatures":[{"sig":"MEQCIGZh4QDZcVcA4brKoqYpq0iMYElpRO3m+Ug/iTijuAYMAiAhUk6z4CutVgv2+yDdH+zt+KQqzvNpj0kz29uLWT2nbg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229630,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJddXgGCRA9TVsSAnZWagAAJ1sP/2XCCyiBxtVH1vxyVJIU\nTvvFL1dYdPsaVreTGtVUlNCRN1shpS9grE8irBiVRBKgAnI7ALM3T7oIXA6B\nsMCtZIlnZznfWakNq7cPcfffaxDqkMsmYcGYqKku6QKlckTARDkc3F86R5SF\nLHK+KIEmNGhU1+iG06GqUUs5V90ZgnU8LXRVBHeTVnV3s0+f+ZhxB7PMc6TH\nOk6OJ67R2D2yfbzWN41n8L5uVcSAmIB622aIx//P9tdijmrqpzE0JEOCb6z7\n7kjKs1hvdi+MaVxjsSe+FypuhHVhWn4eSCl41dY+eDhEKlvpEC6mdoHvd7xc\nA6Vv9L62yezneOjpnWi8ow3iCRiBcian/myrTxDmXmUqGnc9hFhI3eV+CF29\n1dStPhw8QqJHVuzkfvLOgES78M6L6dbZN5ZnOHbGs5R+wrJR1Iw5DB/KaHAA\nuYvCWbD+u65nwaQkj6ccfsj5aWU6SyaT+Hri17qLIbss/NzzuCiIz5w4J6CK\nPPmaZ9lgZKHbE/eNlQBc/LSds6WgLxIVdkZ73Vx131/FUATIXivwKBLa7dNY\nmB43MDUSZkSBL6iPLp/FvbBgQWXKA7sEIEKPTHdGolm2PWnQiv2Lv+2k0EAW\nnHLYU3BniEPHsGc6iKMHBNd00aymVRqJVpENHg9BdQgXJ+JBIJ6nQD82cg8u\n2lyP\r\n=C+rI\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"./aes.js":"./pure/aes.js","./hdkey.js":"./pure/hdkey.js","./keccak.js":"./pure/keccak.js","./pbkdf2.js":"./pure/pbkdf2.js","./random.js":"./pure/random.js","./scrypt.js":"./pure/scrypt.js","./sha256.js":"./pure/sha256.js","./blake2b.js":"./pure/blake2b.js","./ripemd160.js":"./pure/ripemd160.js","./secp256k1.js":"./pure/secp256k1.js"},"scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all elliptic-secp256k1:build scryptsy-without-crypto:build hdkey-without-crypto:build test:node","build":"npm-run-all build:tsc elliptic-secp256k1:build elliptic-secp256k1:copy scryptsy-without-crypto:build scryptsy-without-crypto:copy hdkey-without-crypto:build hdkey-without-crypto:copy","clean":"rimraf vendor test-builds pure shims scryptsy-without-crypto-build hdkey-without-crypto-build '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","elliptic-secp256k1:copy":"mkdir -p vendor && cp src/vendor/elliptic-secp256k1.js ./vendor","elliptic-secp256k1:build":"rollup -c elliptic-secp256k1-config/rollup.config.js","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","hdkey-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","hdkey-without-crypto:build":"bash -x scripts/build-hdkey-without-crypto.sh","scryptsy-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/scryptsy-without-crypto.js ./vendor && cp src/pure/vendor/scryptsy-without-crypto.js ./pure/vendor","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js","scryptsy-without-crypto:build":"bash -x scripts/build-scryptsy-without-crypto.sh"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/alcuadrado/ethereum-cryptography.git","type":"git"},"_npmVersion":"6.11.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"8.16.0","dependencies":{"bip66":"^1.1.5","bn.js":"^4.11.8","pbkdf2":"^3.0.17","blakejs":"^1.1.0","hash.js":"^1.1.7","js-sha3":"^0.8.0","elliptic":"^6.4.1","bs58check":"^2.1.2","create-hash":"^1.2.0","create-hmac":"^1.1.7","randombytes":"^2.1.0","safe-buffer":"^5.1.2","setimmediate":"^1.0.5","@types/pbkdf2":"^3.0.0","browserify-aes":"^1.2.0","@types/secp256k1":"^3.5.0"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","rollup-plugin-alias":"^2.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.0.5_1567979525998_0.9838397390378317","host":"s3://npm-registry-packages"}},"0.0.6":{"name":"ethereum-cryptography","version":"0.0.6","keywords":["ethereum","cryptography"],"author":{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},"license":"MIT","_id":"ethereum-cryptography@0.0.6","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"homepage":"https://github.com/alcuadrado/ethereum-cryptography#readme","bugs":{"url":"https://github.com/alcuadrado/ethereum-cryptography/issues"},"dist":{"shasum":"8b32b0df4df52c22d7c406cb7e8a064eced3c6c0","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.0.6.tgz","fileCount":130,"integrity":"sha512-zV9koX2oJRYGt6Rm1dHEiMDk9H3ZWTaMBalIgQwJQCiYL+LzUnpRH/R7gQSZo1ucMjT2lnJq84ZtuXnlBrYmRw==","signatures":[{"sig":"MEUCIQD9J6fKpwOuzc54133cQdSMEBWDTZq2mqxN4SY5O/ToZQIgOSOd600EVF1Py9Y/uYSRhIG/ulD4L2K9JM0KEYXIHhY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":229640,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJddXtGCRA9TVsSAnZWagAALowP/jz7pQ6UMBojb2F+MUDD\nT9oK12nPNNPzCdCem0d+AGo2dWyvsbotHDqy0iGtBxHisz/JymgXh1AjI92O\nvddGUV9PsEroZrrEGuO14d/8Omv+fuSMbz5xwrvMksDdWVycdD4fdY44KCtW\nl2Xu1TNv4i0nWy7I7/at9REjd+3oV+eTKVvN5r1jJijbI94bxZ3hc8eA5bBJ\n4LwVvzG/V6acE4VrUkm4jka8L6FA5nCvwESlOpl1XSVrCufkkNHMFOWru7Zh\nE4oRIMTUzPt2q47pPX2CJn2WSpJuqjNqbvDcH4q6z8hY11KVHUAZi9NXyRFe\nXjdkBTvin33S52wOMBhKoGrvWzvYKvZoZlI+utTsxvjqw9bd+0SAiQBt9R6a\nwSdTM/7a+lpb8+ekEct4guZZrexeeBypAkToi7UagWjusRObMZDTMo2O/eeV\nT56s6ra8b2TG2R5uVkxBsrcZzEEd+75k+HV/9qek2llNT4vibaBm0T9XnLJp\nZ7csXwtnqCKxaO1EkJ1jc/LxQpLcrQwNxniCJiJY71D6yJApD6WxErq3wtTk\nlTzrCOrYCxfOJZZMcrlF1eBpXBXcncmzaVnptDrVjqeCrKluvVC0YnQArD0K\n4Buh5gqYi4490It8TOIlIHcWdXkIjMfGDippNa7pQEvyLtrqZFsEGnRBLCEw\n0Spj\r\n=fzwI\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"./aes.js":"./pure/aes.js","./hdkey.js":"./pure/hdkey.js","./keccak.js":"./pure/keccak.js","./pbkdf2.js":"./pure/pbkdf2.js","./random.js":"./pure/random.js","./scrypt.js":"./pure/scrypt.js","./sha256.js":"./pure/sha256.js","./blake2b.js":"./pure/blake2b.js","./ripemd160.js":"./pure/ripemd160.js","./secp256k1.js":"./pure/secp256k1.js"},"scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all elliptic-secp256k1:build scryptsy-without-crypto:build hdkey-without-crypto:build test:node","build":"npm-run-all build:tsc elliptic-secp256k1:build elliptic-secp256k1:copy scryptsy-without-crypto:build scryptsy-without-crypto:copy hdkey-without-crypto:build hdkey-without-crypto:copy","clean":"rimraf vendor test-builds pure shims scryptsy-without-crypto-build hdkey-without-crypto-build '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","elliptic-secp256k1:copy":"mkdir -p vendor && cp src/vendor/elliptic-secp256k1.js ./vendor","elliptic-secp256k1:build":"rollup -c elliptic-secp256k1-config/rollup.config.js","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","hdkey-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","hdkey-without-crypto:build":"bash -x scripts/build-hdkey-without-crypto.sh","scryptsy-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/scryptsy-without-crypto.js ./vendor && cp src/pure/vendor/scryptsy-without-crypto.js ./pure/vendor","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js","scryptsy-without-crypto:build":"bash -x scripts/build-scryptsy-without-crypto.sh"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/alcuadrado/ethereum-cryptography.git","type":"git"},"_npmVersion":"6.11.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"8.16.0","dependencies":{"bip66":"^1.1.5","bn.js":"^4.11.8","pbkdf2":"^3.0.17","blakejs":"^1.1.0","hash.js":"^1.1.7","js-sha3":"^0.8.0","elliptic":"^6.4.1","bs58check":"^2.1.2","create-hash":"^1.2.0","create-hmac":"^1.1.7","randombytes":"^2.1.0","safe-buffer":"^5.1.2","setimmediate":"^1.0.5","@types/pbkdf2":"^3.0.0","browserify-aes":"^1.2.0","@types/secp256k1":"^3.5.0"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","rollup-plugin-alias":"^2.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.0.6_1567980357383_0.5119813924809808","host":"s3://npm-registry-packages"}},"0.0.7":{"name":"ethereum-cryptography","version":"0.0.7","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.0.7","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"61a9918a75cc551789be4456375ebacc30af5afa","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.0.7.tgz","fileCount":187,"integrity":"sha512-NtnrJ6mKzHRu2F8evMinoNThTTW6UpRjrxXkIT+cwazHs/FfZ+TGlsSYBwji9nbNtitz45TMg59nu7cjnBfhMQ==","signatures":[{"sig":"MEUCIG0IjQy9yAJsMUbl0WnvuhCcy0xJbTvkieNPzeopwXxIAiEAljkfk9m4+yK2+PfJ2TQqHJP/zWe/VOKjaYeb26xyRp4=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":978195,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd4Tn9CRA9TVsSAnZWagAA1jcP/RSWcObvbsji+8L9XC1+\nF9omtzV9nwvtWX5Gs2f1g7CJVnrxwscF7xlSLSi0Ec5+FN/l54V1TeZvwxRn\nLqAxt+8X7lFeFHcFPvFQ9HJsVfs10yAAN0iWp8BSLfAnODYUwtV4dJQ8EEZU\n4Y+w4SUeSLGGKi4OXn+4bTDoM0uvBsdbebdtp44dODOC64dRFbHm+3BTug/k\nqi6Xd/9Wbj4hOjOcaZeDt7qAz8YwKqggxxw7N/Sf18W+v0H6l9qGx2LpO8Ec\nbXD2A2rEf3O9tsfzX8cQ8B7LZIYyWM3tHH/B+8vqLYktMJ/fFwMRfwGL/laT\niJkBFMu/tf5XoS9fBsrl3zxNFu4h1V74V2jTPiL56WTtkIwxhwVwYOVHcHy7\n/EzBMft80nw8GNuyLfu6ct5Yi3xzJpboUJ+laEk6SAJ1x61mqeHwRlci15r6\naRALr47FjMTntPz94Hrfh4Qz0xuJxmFtO4JiubCoKftB4mkOMfPsVGh8Ja+R\n1oc4+ytXBkNf/1LnCDyi/CVDj9+8MPzlgHJL0UixZz+Y5PlOWR7d5N9E/RyB\nNeUsAGVSRT0ABBqUI44w58J8o9kNezEsz1hiPun0POj5Rw4l6Jd8eoOen7Ez\nYD3NwNPAhtPot1ExCWwK0gV8T7w9IRNLN3PBdv39+tJQPCJ+1QlzLDICyblb\nVLJ6\r\n=mGh+\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"./aes.js":"./pure/aes.js","./hdkey.js":"./pure/hdkey.js","./keccak.js":"./pure/keccak.js","./pbkdf2.js":"./pure/pbkdf2.js","./random.js":"./pure/random.js","./scrypt.js":"./pure/scrypt.js","./sha256.js":"./pure/sha256.js","./blake2b.js":"./pure/blake2b.js","./ripemd160.js":"./pure/ripemd160.js","./secp256k1.js":"./pure/secp256k1.js","./bip39/index.js":"./pure/bip39/index.js"},"scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all elliptic-secp256k1:build scryptsy-without-crypto:build hdkey-without-crypto:build bip39-without-wordlists:build test:node","build":"npm-run-all build:tsc elliptic-secp256k1:build elliptic-secp256k1:copy scryptsy-without-crypto:build scryptsy-without-crypto:copy hdkey-without-crypto:build hdkey-without-crypto:copy bip39-without-wordlists:build bip39-without-wordlists:copy","clean":"rimraf vendor test-builds pure shims scryptsy-without-crypto-build hdkey-without-crypto-build bip39-without-wordlists-build '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","elliptic-secp256k1:copy":"mkdir -p vendor && cp src/vendor/elliptic-secp256k1.js ./vendor","elliptic-secp256k1:build":"rollup -c elliptic-secp256k1-config/rollup.config.js","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","hdkey-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","hdkey-without-crypto:build":"bash -x scripts/build-hdkey-without-crypto.sh","bip39-without-wordlists:copy":"mkdir -p pure/vendor && cp src/pure/vendor/bip39-without-wordlists.js ./pure/vendor","scryptsy-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/scryptsy-without-crypto.js ./vendor && cp src/pure/vendor/scryptsy-without-crypto.js ./pure/vendor","bip39-without-wordlists:build":"bash -x scripts/build-bip39-without-wordlists.sh","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js","scryptsy-without-crypto:build":"bash -x scripts/build-scryptsy-without-crypto.sh"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"6.12.1","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"13.1.0","dependencies":{"bip66":"^1.1.5","bn.js":"^4.11.8","pbkdf2":"^3.0.17","blakejs":"^1.1.0","hash.js":"^1.1.7","js-sha3":"^0.8.0","elliptic":"^6.4.1","bs58check":"^2.1.2","create-hash":"^1.2.0","create-hmac":"^1.1.7","randombytes":"^2.1.0","safe-buffer":"^5.1.2","setimmediate":"^1.0.5","@types/pbkdf2":"^3.0.0","browserify-aes":"^1.2.0","@types/secp256k1":"^3.5.0"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","rollup-plugin-alias":"^2.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.0.7_1575041533048_0.23928519711608942","host":"s3://npm-registry-packages"}},"0.1.0":{"name":"ethereum-cryptography","version":"0.1.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.1.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"b7df61f0f86c9dbb16e3b2a8ce0a7e7fed6fd147","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.1.0.tgz","fileCount":166,"integrity":"sha512-x+CpfA1vMk+p8K0jJ3/ZaO4g9mHqKhcO87RJ8GBX/bGKocq8NbDWdrjmShgvc8BNQKhvIUcAJR3ZcFg31VVljA==","signatures":[{"sig":"MEUCIQDHXa+hl+4EVZ4qgvsX0DT3u3bELRADTlLlZtJcZEgenwIgPla6qotDoPSqkREEfRfpET6MInTUlGcXrQJocKchebg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":849841,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJetvG8CRA9TVsSAnZWagAA9TEP/0Egzla/Igcf8G5INMXD\nZk8IRXYKODMrzBsxFhkWm6Ru/LUmK3B57MZvvZzZd4+kXUnBKiVLU9tq8xTX\nZgsLx9T98GB7Cd28RBTx65iHvMuAnZO9ufpKSa1CflTfCV9Zmh03tfbhOeJN\nU0Y9umnXv/oTlL7u8GqPbvK1pcgboJhBBPLLJmL+OzdBD/prKIyRyy+3/dsn\np7js98YxR/SAFX9b2IRGP4SgvpV1nnSE2Pho+6+/d6Ee1kpuB9Vn6CDFAcvz\nwWAu8gFed+4GfmgaBWmzzTbEqVyU64Vrl7FP/DrUgNd7WmXuo63SI4N9V+Du\naC22anrMktkpoEYl6xbQDyunzJIfbrYsGXAEZqPmeKLpWGxm5Uva9CNfB50x\nmwq9jQYbNm42xaeB58jzESFAJqyhnoSRzhXmtsHCwHMX8TDxNrWYID7UiDwM\nuuyNnc3Eb3Xd4HgmoDL3NRJPdTMoTGplI1pWHvOtdEP4thqmd+OWhiItKHWQ\n60IS8mp1a4JGZfDAN5Bx0hgYUI9/PEeDTp8n7TKX8JCq11mndw2YsqCjfaoF\ndUaY3QmBaRrV0hxqWzLlhK1rFftK8jiZVul9Subca2ACRR+uROFxNyEWnj1f\nv09a28hOAcR4T2slpD6ylg58guTRTUp7/6F0hkbKGkW3b0FLsnZjZrzhfvDA\nfpcc\r\n=F/Af\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"./hdkey.js":"./pure/hdkey.js","./sha256.js":"./pure/sha256.js","./blake2b.js":"./pure/blake2b.js","./ripemd160.js":"./pure/ripemd160.js","./bip39/index.js":"./pure/bip39/index.js"},"gitHead":"cb347560ac6a4b3fd318222465fc0b4b3e95da25","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all hdkey-without-crypto:build bip39-without-wordlists:build test:node","build":"npm-run-all build:tsc hdkey-without-crypto:build hdkey-without-crypto:copy bip39-without-wordlists:build bip39-without-wordlists:copy","clean":"rimraf vendor test-builds pure shims hdkey-without-crypto-build bip39-without-wordlists-build bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","hdkey-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","hdkey-without-crypto:build":"bash -x scripts/build-hdkey-without-crypto.sh","bip39-without-wordlists:copy":"mkdir -p pure/vendor && cp src/pure/vendor/bip39-without-wordlists.js ./pure/vendor","bip39-without-wordlists:build":"bash -x scripts/build-bip39-without-wordlists.sh","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"6.13.4","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"10.19.0","dependencies":{"keccak":"^3.0.0","pbkdf2":"^3.0.17","blakejs":"^1.1.0","hash.js":"^1.1.7","bs58check":"^2.1.2","scrypt-js":"^3.0.0","secp256k1":"^4.0.1","create-hash":"^1.2.0","create-hmac":"^1.1.7","randombytes":"^2.1.0","safe-buffer":"^5.1.2","setimmediate":"^1.0.5","@types/pbkdf2":"^3.0.0","browserify-aes":"^1.2.0","@types/secp256k1":"^4.0.1"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","rollup-plugin-alias":"^2.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.1.0_1589047739825_0.40656982348939374","host":"s3://npm-registry-packages"}},"0.1.2":{"name":"ethereum-cryptography","version":"0.1.2","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.1.2","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"81da0ba250a45f6de712b882026e911c496f7e72","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.1.2.tgz","fileCount":156,"integrity":"sha512-VsGgeYGalsAjaDqvGYMDZnal1dMWVfsnRtUdMfqBjRK1p4dpJM4837DG7OKdgrP7hcAtz2jWfMC+bWj9O2xokQ==","signatures":[{"sig":"MEUCICf9lAYevBbEP6Q2ZCFoZ4xfSf0KhOJalq3QRDuWq+6qAiEAgE9ueiP3Q43YVSv2KD2OOi5i9lNUJuuvfIvEbvIhQWE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":844774,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeuAawCRA9TVsSAnZWagAARToP/j5KeWH5wyy+xDJwaLl5\nLO8kHVJvNvJceDgAuiwPWt9Z1Q9o0Wl67+y5xcqp0aj/hHPLaQgaDcvC8n59\n7GzWThqP/EOjuoqMwFXe6jEIMyqGyIouMNBfudylMLUxyehjLCccfOi2kVNR\nCtEACGxCG4XquDLqMfyznXHGVMcoGuj0KQ1Lx1uzGF8eA+V5H9JycOpzspoV\nVHPefDMdIsjH9yTsdBu8cempNELqBa2nJQY0FRw/zZdhZlWo67MxUuuKrWDT\n6YDBfucUxhqgKS4Ej96huf6T9fZzxZSgWQFZrL83S7xuIvikS5ViKmbvioix\nrOdATO3RWRd6qDkf+30mybtDqXcNa7d3yDOwSwW0i/jr83b0924oOoL4r1Tb\nD7Ft8GAGIGyFdT9SGwdtmxwWWLQ8JhMOdEVQhLzpcFAJtb6KJxIGb1K7FDlh\nPMIiq/EK+7Eh7hOE188o3J9Ecepwuse0k33fW/xF66HH4TzxNd+wNwx8+RhG\nxCnF/Dy+lPlsOtiNIva4+V67cw/t0E8hjO/sEteyD84E64YqpIMs95kg6McM\nTY/ZAGlymnNLg9/9TP0Cl96pw5kp74XaLUXx1+JfX7Zz44YQ2yr2rGMEXVx2\nsCZmpZdoKySozUhFN841RJq/xzDHwjfEwnUOlnuiPEoQGFnp/3QhQWSPiKEv\nVC+O\r\n=P5v7\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"./hdkey.js":"./pure/hdkey.js","./sha256.js":"./pure/sha256.js","./ripemd160.js":"./pure/ripemd160.js"},"gitHead":"691c1b640db33472b051a642144823c30a8846fb","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all hdkey-without-crypto:build bip39-without-wordlists:build test:node","build":"npm-run-all build:tsc hdkey-without-crypto:build hdkey-without-crypto:copy bip39-without-wordlists:build bip39-without-wordlists:copy","clean":"rimraf vendor test-builds pure shims hdkey-without-crypto-build bip39-without-wordlists-build bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","hdkey-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","hdkey-without-crypto:build":"bash -x scripts/build-hdkey-without-crypto.sh","bip39-without-wordlists:copy":"mkdir -p vendor && cp src/vendor/bip39-without-wordlists.js ./vendor","bip39-without-wordlists:build":"bash -x scripts/build-bip39-without-wordlists.sh","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"6.13.4","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"10.19.0","dependencies":{"keccak":"^3.0.0","pbkdf2":"^3.0.17","blakejs":"^1.1.0","hash.js":"^1.1.7","bs58check":"^2.1.2","scrypt-js":"^3.0.0","secp256k1":"^4.0.1","create-hash":"^1.2.0","create-hmac":"^1.1.7","randombytes":"^2.1.0","safe-buffer":"^5.1.2","setimmediate":"^1.0.5","@types/pbkdf2":"^3.0.0","browserify-aes":"^1.2.0","@types/secp256k1":"^4.0.1"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","rollup-plugin-alias":"^2.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.1.2_1589118639784_0.038159567450157805","host":"s3://npm-registry-packages"}},"0.1.3":{"name":"ethereum-cryptography","version":"0.1.3","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.1.3","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"8d6143cfc3d74bf79bbd8edecdf29e4ae20dd191","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.1.3.tgz","fileCount":156,"integrity":"sha512-w8/4x1SGGzc+tO97TASLja6SLd3fRIK2tLVcV2Gx4IB21hE19atll5Cq9o3d0ZmAYC/8aw0ipieTSiekAea4SQ==","signatures":[{"sig":"MEUCIAsoxIlFrFOCwbvUHHuEzNLINLGvjP7jHlzwXpu3zP5WAiEA46FvWz7+fVdPs9wt3CjCC+3t8t5N99x2aPoCF7VlGLw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":845210,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe3sm8CRA9TVsSAnZWagAAkBcQAItcx5PIoiMT4LIgdbTj\ntgSjwkUYaWfLwAqe3cUsp+CRJ29pQesVL7uBNJYgtJGFEXBybwH/8v8pDAIc\nNvVoUGXyHOjotxqJz1dxU1nx30IBqyRRLueDt+dKD3ioeH+P0lBgA6FsNQNd\nbRBo14FrHgA05IKZkG3LZmJ65/GKzKk9evlu/Sgw9dhyA8qkPd2jYzAmU8qY\nuon0Jij6ghMGEpykkAIM8/XgW14pulJ8f7mOUFHw4KbNfd2d/8SQ3rE1Duk+\n92PnhcG2rrSbxhq4o2yynXmYvVf3pxajh+/yAwtX9PVY8mu5ctU5hRM5l8Mz\ntP5SV1yPt+YSojg/cYKsor3vjUms6d9p67wTJik/5RCwH9co54GSPmaFc5cq\n0RABSJl3hFK+2ZRV+cbmic9xakKCoLSkL2Rw7iCkKouMrcF6QoLcNe48HS7C\nVszfBsm/oKANN+GUXD4oyBp9qlIv3d5Nkx1Vk0BooKbcwdi1+/zIr+6LGSwM\n6O9GOa3J/bIV1Jn+bwJ+FMvp7SdE2dpo9hARIwt0M9y0bc7DT3MQypTUhf0n\nwXEnLsQNT8ilYTAtwRbKH++rHYeEQKxcU68iNKiM3qTH5jutf7OUiwxbRHl8\nfjMfZk/adGBFNGUbBkXP5d9q5RR+rR6gFQkl15Wc4yvK5JwdXwPt117OMcn/\n0f2H\r\n=F6uk\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"./hdkey.js":"./pure/hdkey.js","./sha256.js":"./pure/sha256.js","./ripemd160.js":"./pure/ripemd160.js"},"gitHead":"a57a802364e62f32e0edc97d0a4b4889169dd644","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all hdkey-without-crypto:build bip39-without-wordlists:build test:node","build":"npm-run-all build:tsc hdkey-without-crypto:build hdkey-without-crypto:copy bip39-without-wordlists:build bip39-without-wordlists:copy","clean":"rimraf vendor test-builds pure shims hdkey-without-crypto-build bip39-without-wordlists-build bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","hdkey-without-crypto:copy":"mkdir -p vendor pure/vendor && cp src/vendor/hdkey-without-crypto.js ./vendor && cp src/pure/vendor/hdkey-without-crypto.js ./pure/vendor","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","hdkey-without-crypto:build":"bash -x scripts/build-hdkey-without-crypto.sh","bip39-without-wordlists:copy":"mkdir -p vendor && cp src/vendor/bip39-without-wordlists.js ./vendor","bip39-without-wordlists:build":"bash -x scripts/build-bip39-without-wordlists.sh","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"6.14.5","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"10.19.0","dependencies":{"keccak":"^3.0.0","pbkdf2":"^3.0.17","blakejs":"^1.1.0","hash.js":"^1.1.7","bs58check":"^2.1.2","scrypt-js":"^3.0.0","secp256k1":"^4.0.1","create-hash":"^1.2.0","create-hmac":"^1.1.7","randombytes":"^2.1.0","safe-buffer":"^5.1.2","setimmediate":"^1.0.5","@types/pbkdf2":"^3.0.0","browserify-aes":"^1.2.0","@types/secp256k1":"^4.0.1"},"_hasShrinkwrap":false,"devDependencies":{"chai":"^4.2.0","karma":"^4.3.0","mocha":"^6.2.0","rimraf":"^3.0.0","rollup":"^1.20.3","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","karma-chai":"^0.1.0","typescript":"~3.6.2","@types/chai":"^4.2.1","@types/node":"^8.10.52","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","parcel-bundler":"^1.12.3","rollup-plugin-json":"^4.0.0","rollup-plugin-alias":"^2.0.0","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","rollup-plugin-node-globals":"^1.4.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-node-builtins":"^2.1.2"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.1.3_1591658939972_0.8295302370502311","host":"s3://npm-registry-packages"}},"0.2.0":{"name":"ethereum-cryptography","version":"0.2.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.2.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"6a163130141abe85e0300646eee95323ae725555","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.2.0.tgz","fileCount":123,"integrity":"sha512-6w64pvUvH3InBwNhax5j7brR4aGbdbd9B1R1uRwK9jNMTmyWMd7mSBxcGlMQv23qh+l/n0yjbQp2j0Q/gxhRdw==","signatures":[{"sig":"MEYCIQDaTZ67qscv/TDRhqrYZorIiWWSy1W5kMgY7nTGSXziyQIhAJ1+0DB0dlJcwbyB4LdIhsSKWvz23nwbHyykl8idys2n","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":481411},"main":"./index.js","readme":"# ethereum-cryptography\n\n[![npm version][1]][2] [![Travis CI][3]][4] [![license][5]][6] [![Types][7]][8]\n\nThis package contains all pure-js cryptographic primitives normally used when\ndeveloping Javascript / TypeScript applications and tools for Ethereum.\n\nThe cryptographic primitives included are:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically strong pseudorandom number generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-phrases)\n* [AES Encryption](#aes-encryption)\n\n**October 2021 update:** We're releasing **experimental** version 0.2 of the package.\nThe module has been completely rewritten:\n\n- ~6x smaller: 4,000 lines of code instead of 22,438 (with all deps); 185KB instead of 755KB\n- 3 dependencies (pending an audit) instead of 38\n- **Same functionality**, all old APIs remain the same except for two breaking changes:\n    1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js. See [Upgrading](#upgrading)\n    2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n    3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n- The new module [has not been audited yet](#security), but it's in the process of getting the audit. Use it at your own risk\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography@next\n\n# Yarn\nyarn add ethereum-cryptography@next\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\n// KDFs\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\n// Random\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\n// AES encryption\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\n// secp256k1 elliptic curve operations\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\n// utilities\nconst { hexToBytes, toHex, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { sha512 } = require(\"ethereum-cryptography/sha512\");\nconst { keccak256, keccak224, keccak384, keccak512 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nconst { toHex } = require(\"ethereum-cryptography/utils\");\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nconst { pbkdf2 } = require(\"ethereum-cryptography/pbkdf2\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed?: false): Uint8Array;\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Promise<Uint8Array>;\nfunction signSync(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Uint8Array;\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction recoverPublicKey(msgHash: Uint8Array, signature: Uint8Array, recovery: number): Uint8Array | undefined;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-secp256k1`](https://github.com/paulmillr/noble-secp256k1), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain caracteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nconst secp = require(\"ethereum-cryptography/secp256k1\");\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp.getPublicKey(privateKey);\n  const signature = await secp.sign(messageHash, privateKey);\n  const isSigned = secp.verify(signature, messageHash, publicKey);\n})();\n```\n\nNote: if you've been using ethereum-cryptography v0.1, it had different API. We're providing a compatibility layer for users who want to upgrade without hassle. Check out [the legacy documentation](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nThis module exports a single class whose type is\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  public versions: Versions;\n  public depth: number;\n  public index: number;\n  public chainCode: Uint8Array | null;\n  public privateKey: Uint8Array | null;\n  public publicKey: Uint8Array | null;\n  public fingerprint: number;\n  public parentFingerprint: number;\n  public pubKeyHash: Uint8Array | undefined;\n  public identifier: Uint8Array | undefined;\n  public privateExtendedKey: string;\n  public publicExtendedKey: string;\n\n  private constructor(versios: Versions);\n  public derive(path: string): HDKey;\n  public deriveChild(index: number): HDKey;\n  public sign(hash: Uint8Array): Uint8Array;\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  public wipePrivateData(): this;\n  public toJSON(): { xpriv: string; xpub: string };\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n```js\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { hexToBytes } = require(\"ethereum-cryptography/utils\");\n\nconst seed = \"fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\";\nconst hdkey = HDKey.fromMasterSeed(hexToBytes(seed));\nconst childkey = hdkey.derive(\"m/0/2147483647'/1\");\n\nconsole.log(childkey.privateExtendedKey);\n```\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\n```js\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Uint8Array;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Uint8Array\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\nconst { hexToBytes, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Note:** consider using `secp256k1` instead;\nThis module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future,\nbut we're keeping it around for now, for backwards-compatibility.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1-compat\");\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nVersion 0.2 changes from 0.1:\n\n- **Breaking:** we target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support\n  older runtimes, use `ethereum-cryptography@0.1`\n- **Breaking:** we return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js:\n\n```\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nconst { toHex } = require(\"ethereum-cryptography/utils\");\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nThis library is in the process of getting a security audit.\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n","browser":{"crypto":false},"gitHead":"b1f35053df3f0cfa132fc45d59b688ca0d62994a","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.10.0","dependencies":{"micro-base":"^0.9.0","noble-hashes":"^0.2.1","noble-secp256k1":"^1.2.14"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"^4.3.5","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.2.0_1634676532093_0.6436393220306607","host":"s3://npm-registry-packages"}},"0.2.1":{"name":"ethereum-cryptography","version":"0.2.1","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.2.1","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"7a2cce5c47157eb6992229cf26ccd889d5ee4754","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.2.1.tgz","fileCount":123,"integrity":"sha512-hZkrGoL/LkL8OtrXJkCsNJkOs7ONplB1wvAq8pfagpHC5KVGJHWx2xFbRGuWP2zbMKBdxKBcbzMOG4v/ejSulw==","signatures":[{"sig":"MEUCIBEosjG/1SCXR8QdAOQ8f5/emugokoRn8EqE57BYpff8AiEAxUwDsMrpswp2r359J6ilhaIu4F4d/Dw51v5BkEHt8cg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":481410,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJht9B+CRA9TVsSAnZWagAAukoP/iLop9ZPECD310ellPd0\nKScSGGYFh3D7UXjVYklHl1uR4K14nHc/sKG+NQYJJR2JgWE13rn462F+obKn\n8FjEfEX0wuEVOLsldm8V5Amn8QGfw5Vqb/8kpIhw/pFzQXvDf4UmlXS99tQ8\n4ZhV8nsNu3D9LtadNYZO+ZIwySMM455AN5RcmIkULuRwZ3Tt3EoUEqC6cWfN\nW+zaaSPheLo4/8FgSNfUxSrEnzqCAxbM2IMejabg6uUI806d1xviPHkuU6N5\nd8O9wBtY5lFTcs08GRPIp9V2DD1si7MFlKA0aqLPpU7Pqhk4c3gEpC7wyRan\nH1gRiT9G+aCpGMNh4Mrc1i2beogEkLl9mA/UKyhsXQMw/aEQoGmXRMHjpFJz\nKP2miLkebDIqqk58o0ab/3TfaIUH1eiukojYQ1ErkcCDlp3VwNwLytmxfbWG\nBv9L1qeCKsCdbMIZpjtuNg/FFqH3z6zWl8ReRTE40APhVnY9LH4EfpCpcxe9\n8D3gqpnSCK3VncTd9mDh4/FI8YZR1+RuGVVH3thERwLbcCAjM1Uejsp/aH8Z\nHd9j54frVRTivx5bq8AO3xM/3psf5qrU3R3126IvlGIq7PryKUjS7a5BtRly\n4PSdEja4YXhm6LkpjxsoWpYedSWHJcUQOCNWYT5E1jXezNBN5l5Eqlxxm/qc\neIBN\r\n=N7GK\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","browser":{"crypto":false},"gitHead":"9d2f6b28e81f49419d407f34aef13dfc44aaa0f0","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.4.1","dependencies":{"micro-base":"^0.10.0","@noble/hashes":"^0.4.4","@noble/secp256k1":"^1.3.3"},"_hasShrinkwrap":false,"devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"^4.3.5","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.2.1_1639436414081_0.028442633213539237","host":"s3://npm-registry-packages"}},"0.2.2":{"name":"ethereum-cryptography","version":"0.2.2","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.2.2","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"4334d6689593fd27c29f837a161bbb1e50158210","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.2.2.tgz","fileCount":123,"integrity":"sha512-H0oCY2xQqXShmyIZFc58xRkkjHSbYW9lPKFdn6LCb3ZF2j7F98Y+K1G4gWMnKAtn7opOv6YIGYXUGxD43rzA9g==","signatures":[{"sig":"MEUCIAntJXTODoKiFz4bNaSBY/U6aCy47ty9CtH4UN4RnUMCAiEA2ZJ2tarui8gICo2c4Od4P8emDll405Mmh0C3mTF83TU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":481242,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhwGyhCRA9TVsSAnZWagAAjSEQAJ+Eh9A9mXdvxAiWKZwh\nnlBTMtD3SO84E/yNdifaPj1aAlCCPl5LalrCJps/8TgOLoq63VnyPU66e+ku\nsDLBASM6/AH74BQh5fwesoKx3RU8ld8Xqydh0xIu/85qqKus3TN43FsjNUZw\n1KKOO19VeHompFIS7SDhY5MaLCqphMUXk4DXodXTXQHkI6RyHsVmHB16n0LQ\nKcD5OnfIG7qQAfWMvt7ff0QTYO+926ksJyo9yZuAbN6l/6nvMIVJYKIraMya\nWKEKUMEZe+0DSPmL1r1n7/veR5BDTohhJcvhyuk1cA941/2bYZV4uxfUoFG+\nYjxfXcIgInEjhWLoP4mrWVpVesZjQBHBli04jMwrZcS26RJgxiOtPuAMOlE3\nozde9/pOg+Y0Imx6EQ0Y6LH+l7/FwkHzNIU/stTDjFTGip3bp6mSCMgccAOy\n+aukRi8fIhWhRppWrj+9Wlx/uI1cFRUYwKtTYpbCAYvKdb7l5GEnJ80bwYy6\nvjBFGVSMSMlR4Mw6CCB+BPgCwEb6q5sETf3QjlZsIfLOYQ3icuodsdPY/mxm\nOKuCkLnGDPPTaU37AXj/brk3yF53ClokTCyRZMHADp7Lxbne17SvlIdW7LKu\nB43YVczbaCOFu+lsS7n6RbKqapxX3YcarY17RqQhOQmF5ADykKA26/7hUPXY\nM67T\r\n=Bg1W\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","readme":"# ethereum-cryptography\n\n[![npm version][1]][2] [![Travis CI][3]][4] [![license][5]][6] [![Types][7]][8]\n\nThis package contains all pure-js cryptographic primitives normally used when\ndeveloping Javascript / TypeScript applications and tools for Ethereum.\n\nThe cryptographic primitives included are:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically strong pseudorandom number generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-phrases)\n* [AES Encryption](#aes-encryption)\n\n**October 2021 update:** We're releasing **experimental** version 0.2 of the package.\nThe module has been completely rewritten:\n\n- ~6x smaller: 4,000 lines of code instead of 22,438 (with all deps); 185KB instead of 755KB\n- 3 dependencies (pending an audit) instead of 38\n- **Same functionality**, all old APIs remain the same except for two breaking changes:\n    1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js. See [Upgrading](#upgrading)\n    2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n    3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n- The new module [has not been audited yet](#security), but it's in the process of getting the audit. Use it at your own risk\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography@next\n\n# Yarn\nyarn add ethereum-cryptography@next\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\n// KDFs\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\n// Random\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\n// AES encryption\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\n// secp256k1 elliptic curve operations\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\n// utilities\nconst { hexToBytes, toHex, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { sha512 } = require(\"ethereum-cryptography/sha512\");\nconst { keccak256, keccak224, keccak384, keccak512 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nconst { toHex } = require(\"ethereum-cryptography/utils\");\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nconst { pbkdf2 } = require(\"ethereum-cryptography/pbkdf2\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed?: false): Uint8Array;\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Promise<Uint8Array>;\nfunction signSync(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Uint8Array;\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction recoverPublicKey(msgHash: Uint8Array, signature: Uint8Array, recovery: number): Uint8Array | undefined;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-secp256k1`](https://github.com/paulmillr/noble-secp256k1), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain caracteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nconst secp = require(\"ethereum-cryptography/secp256k1\");\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp.getPublicKey(privateKey);\n  const signature = await secp.sign(messageHash, privateKey);\n  const isSigned = secp.verify(signature, messageHash, publicKey);\n})();\n```\n\nNote: if you've been using ethereum-cryptography v0.1, it had different API. We're providing a compatibility layer for users who want to upgrade without hassle. Check out [the legacy documentation](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nThis module exports a single class whose type is\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  public versions: Versions;\n  public depth: number;\n  public index: number;\n  public chainCode: Uint8Array | null;\n  public privateKey: Uint8Array | null;\n  public publicKey: Uint8Array | null;\n  public fingerprint: number;\n  public parentFingerprint: number;\n  public pubKeyHash: Uint8Array | undefined;\n  public identifier: Uint8Array | undefined;\n  public privateExtendedKey: string;\n  public publicExtendedKey: string;\n\n  private constructor(versios: Versions);\n  public derive(path: string): HDKey;\n  public deriveChild(index: number): HDKey;\n  public sign(hash: Uint8Array): Uint8Array;\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  public wipePrivateData(): this;\n  public toJSON(): { xpriv: string; xpub: string };\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n```js\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { hexToBytes } = require(\"ethereum-cryptography/utils\");\n\nconst seed = \"fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\";\nconst hdkey = HDKey.fromMasterSeed(hexToBytes(seed));\nconst childkey = hdkey.derive(\"m/0/2147483647'/1\");\n\nconsole.log(childkey.privateExtendedKey);\n```\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\n```js\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\nconst { hexToBytes, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Note:** consider using `secp256k1` instead;\nThis module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future,\nbut we're keeping it around for now, for backwards-compatibility.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1-compat\");\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nVersion 0.2 changes from 0.1:\n\n- **Breaking:** we target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support\n  older runtimes, use `ethereum-cryptography@0.1`\n- **Breaking:** we return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js:\n\n```\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nconst { toHex } = require(\"ethereum-cryptography/utils\");\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nThis library is in the process of getting a security audit.\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n","browser":{"crypto":false},"gitHead":"79567293e8be2af909968d3bc7e0d6f3f5864b92","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"12.22.7","dependencies":{"micro-base":"^0.10.0","@noble/hashes":"^0.5.1","@noble/secp256k1":"^1.3.3"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"^4.3.5","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.2.2_1640000673476_0.7329919524145732","host":"s3://npm-registry-packages"}},"0.2.3":{"name":"ethereum-cryptography","version":"0.2.3","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.2.3","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"956b069b7d938899d1e925ece65e95d558c58298","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.2.3.tgz","fileCount":123,"integrity":"sha512-Eefl/gIqi9p803opeheSLMeIW0LrGy8EnMr7S2NW0TWQNgjywgoQH2gKDw2UPf1Ybdmd9zvCnP7b6khWvlvAJw==","signatures":[{"sig":"MEUCIQCy6P+UJdRNNbhyI8jXOVYJ+84OBsdxsNYDdoIpyhdeFQIgAYd529zDF5n+T5ISsCNja2uTOCGp2yoQPmHhsdST0LM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":482333,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhw3ElCRA9TVsSAnZWagAA2TcP/01EbGt2gKnzq1CUCWv3\nz3ItyiK0lHGwsM+4X1aVfDWccW2VX5JREUCRkeR9mvyXNnGX/vQ+4niqE/la\nh7/93LM8TUspxo0I7JMnEjunTKScXj30hiI7JTSdM3xlxz4VAOHOlwSaIWxk\nMxL1RKzD4gRUgVRapWYha+oRKaXMgXne+tjooVWOhhhWwvULqbS7guVxZxA+\nTd5uAee/FN259RjIzeYUuyy680V/kldXjmcFFG20RiNF7y4DX8pIiDg7ERDX\nMnLkWPR6Y/q07dpeQIalafOVKtqMq/uhC9hV/Kbn/vzgtfNw+u6lScbCHXbO\neRdDo/+VrqXJdR0K2M+99f/INyvfRsi4TwzpKDLWxQ9TMY/pDcKpl52uOvoC\nj/6gsPdcIL1fHft2+yVIeonDbghH4L1LLtg39zi6mJmEI8GEYSRrXpcsCPjG\nrzlDTg/jot3dk4chUrGJRNNA19ald4zCksQwAF/Nh6H1lBbhwsHXq/weNzCT\n+bl/bwWzlL6u9JFVa1R9ViZF/1gn3KRSdFnp02VGiKScIU9q3Qfa7Cezo35E\n/iOvvC0MYNBYeoxIyJnEkr/KnJ8ijfOpLqplcHjywDtFyyyaLCUsoMVWAmIH\nd9zBcPthJbZ6i+eFzxwb9RtoEfAHigj5SKvGEHzsGFw0UTsjbqcnJZ0kTNAV\nHCcM\r\n=Urz4\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","readme":"# ethereum-cryptography\n\n[![npm version][1]][2] [![Travis CI][3]][4] [![license][5]][6] [![Types][7]][8]\n\nThis package contains all pure-js cryptographic primitives normally used when\ndeveloping Javascript / TypeScript applications and tools for Ethereum.\n\nThe cryptographic primitives included are:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically strong pseudorandom number generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-phrases)\n* [AES Encryption](#aes-encryption)\n\n**October 2021 update:** We're releasing **experimental** version 0.2 of the package.\nThe module has been completely rewritten:\n\n- ~6x smaller: 4,000 lines of code instead of 22,438 (with all deps); 185KB instead of 755KB\n- 3 dependencies (pending an audit) instead of 38\n- **Same functionality**, all old APIs remain the same except for two breaking changes:\n    1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js. See [Upgrading](#upgrading)\n    2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n    3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n- The new module [has not been audited yet](#security), but it's in the process of getting the audit. Use it at your own risk\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography@next\n\n# Yarn\nyarn add ethereum-cryptography@next\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\n// KDFs\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\n// Random\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\n// AES encryption\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\n// secp256k1 elliptic curve operations\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\n// utilities\nconst { hexToBytes, toHex, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { sha512 } = require(\"ethereum-cryptography/sha512\");\nconst { keccak256, keccak224, keccak384, keccak512 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nconst { toHex } = require(\"ethereum-cryptography/utils\");\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nconst { pbkdf2 } = require(\"ethereum-cryptography/pbkdf2\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed?: false): Uint8Array;\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Promise<Uint8Array>;\nfunction signSync(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Uint8Array;\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction recoverPublicKey(msgHash: Uint8Array, signature: Uint8Array, recovery: number): Uint8Array | undefined;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-secp256k1`](https://github.com/paulmillr/noble-secp256k1), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain caracteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nconst secp = require(\"ethereum-cryptography/secp256k1\");\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp.getPublicKey(privateKey);\n  const signature = await secp.sign(messageHash, privateKey);\n  const isSigned = secp.verify(signature, messageHash, publicKey);\n})();\n```\n\nNote: if you've been using ethereum-cryptography v0.1, it had different API. We're providing a compatibility layer for users who want to upgrade without hassle. Check out [the legacy documentation](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nThis module exports a single class `HDKey`, which should be used like this:\n\n```ts\nconst { HDKey } = require(\"ethereum-cryptography/secp256k1\");\nconst hdkey1 = HDKey.fromMasterSeed(seed);\nconst hdkey2 = HDKey.fromExtendedKey(base58key);\nconst hdkey3 = HDKey.fromJSON({ xpriv: string });\n\n// props\n[hdkey1.depth, hdkey1.index, hdkey1.chainCode];\nconsole.log(hdkey2.privateKey, hdkey2.publicKey);\nconsole.log(hdkey3.derive(\"m/0/2147483647'/1\"));\nconst sig = hdkey3.sign(hash);\nhdkey3.verify(hash, sig);\n```\n\nNote: `chainCode` property is essentially a private part\nof a secret \"master\" key, it should be guarded from unauthorized access.\n\nThe full API is:\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  readonly versions: Versions;\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array | null = null;\n  readonly parentFingerprint: number = 0;\n\n  get fingerprint(): number;\n  get identifier(): Uint8Array | undefined;\n  get pubKeyHash(): Uint8Array | undefined;\n  get privateKey(): Uint8Array | null;\n  get publicKey(): Uint8Array | null;\n  get privateExtendedKey(): string;\n  get publicExtendedKey(): string;\n\n  derive(path: string): HDKey;\n  deriveChild(index: number): HDKey;\n  sign(hash: Uint8Array): Uint8Array;\n  verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  wipePrivateData(): this;\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n```js\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { hexToBytes } = require(\"ethereum-cryptography/utils\");\n\nconst seed = \"fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\";\nconst hdkey = HDKey.fromMasterSeed(hexToBytes(seed));\nconst childkey = hdkey.derive(\"m/0/2147483647'/1\");\n\nconsole.log(childkey.privateExtendedKey);\n```\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\n```js\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\nconst { hexToBytes, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Note:** consider using `secp256k1` instead;\nThis module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future,\nbut we're keeping it around for now, for backwards-compatibility.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1-compat\");\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nVersion 0.2 changes from 0.1:\n\n- **Breaking:** we target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support\n  older runtimes, use `ethereum-cryptography@0.1`\n- **Breaking:** we return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js:\n\n```\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nconst { toHex } = require(\"ethereum-cryptography/utils\");\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nThis library is in the process of getting a security audit.\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n","browser":{"crypto":false},"gitHead":"0652c615d0daaa1f2959f7282c4ce04146ca0a0f","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"12.22.7","dependencies":{"micro-base":"^0.10.0","@noble/hashes":"^0.5.2","@noble/secp256k1":"^1.3.3"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"^4.3.5","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.2.3_1640198436853_0.9749660968348177","host":"s3://npm-registry-packages"}},"0.2.4":{"name":"ethereum-cryptography","version":"0.2.4","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.2.4","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"802e8b40a32c7e5ee2da3fcef429be519b3e5e0c","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.2.4.tgz","fileCount":123,"integrity":"sha512-QUZE7o+yoFybBx1WrkClLIbdNOAI8h7Fct5TFwCGKkLyygSUY7xBmyxzlyZthusJ0v9aM0FQRRhINFLZLfFJ2A==","signatures":[{"sig":"MEYCIQCCK75dJIHyy+/cKrtnfc1WRPQOhbrTJhmAhPVicmIsawIhAPFGihqsc8kGQBSljPkpsWIRa0Z1QNzNc3N/XuZT+DsR","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":484070,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhxdF5CRA9TVsSAnZWagAAdtwP+wcGLvZqoPSei/pXxQrb\ny66vo5dVRMjKjwwDU2G8Bz5aPxNCk1Ghhf1m3lUr3kJ8mN+OW4vt/vI85Mj7\n8LA+YrEeOV7CiwSyhcFhI+MsijbjIqynSDyOtEunwTRT0ECAjPPIhnOzWe8G\n+i32xBsJVqpcbz7aqloZvAzvyFWv/inX42BE3IoDj/BCeoz4+Eyq376E+ds5\nL8RJGppj9dTMeY0+TJYpJXqohKKNmATk++57/pHa3tx83x70L2sQIB6sMnVX\nqTThiPrqf7WOLKieJhPzCA0amUsKoqmyVrpPSROnN0KJ2xehtoiBGekKM8ed\nF2VNgUudDfKn3iqSyov+PIs4f5uknvRWfXaWA1W589p+1mCcOjGiHhaBBy6p\n2pC8VfPeqjoC+Zo7LC9Ekv34sKhtSuXmtv8PjFAo6Qydz8bug6pUGQAMD/+j\nV/s8bJ2luCzRqcQPmA1OgY5vHPsPoK9G+usfFIlRVfF5BP9L+E//6bDtvct8\n9gLeo7C4Ru2Cck30mpxuhngJ2XDToeuGE/vs+SNhneZMS2828Fx0y5xgtQJj\nl892haoy8/CU9FH/QAmZFJN+sYO7FVIa7YL1vEc5xfJQfUJVWPMT1zBdMlNa\n7uMzNgTd7V847FD//bD3FGI5pwXfcTrQAel4P3wF3SC/ItCtjreiDvrIVszz\nqwR0\r\n=kFIP\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","readme":"# ethereum-cryptography\n\n[![npm version][1]][2] [![Travis CI][3]][4] [![license][5]][6] [![Types][7]][8]\n\nThis package contains all pure-js cryptographic primitives normally used when\ndeveloping Javascript / TypeScript applications and tools for Ethereum.\n\nThe cryptographic primitives included are:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically strong pseudorandom number generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-phrases)\n* [AES Encryption](#aes-encryption)\n\n**October 2021 update:** We're releasing **experimental** version 0.2 of the package.\nThe module has been completely rewritten:\n\n- ~6x smaller: 4,000 lines of code instead of 22,438 (with all deps); 185KB instead of 755KB\n- 3 dependencies (pending an audit) instead of 38\n- **Same functionality**, all old APIs remain the same except for two breaking changes:\n    1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js. See [Upgrading](#upgrading)\n    2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n    3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n- The new module [has not been audited yet](#security), but it's in the process of getting the audit. Use it at your own risk\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography@next\n\n# Yarn\nyarn add ethereum-cryptography@next\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\n// KDFs\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\n// Random\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\n// AES encryption\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\n// secp256k1 elliptic curve operations\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\n// utilities\nconst { hexToBytes, toHex, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { sha512 } = require(\"ethereum-cryptography/sha512\");\nconst { keccak256, keccak224, keccak384, keccak512 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nconst { toHex } = require(\"ethereum-cryptography/utils\");\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nconst { pbkdf2 } = require(\"ethereum-cryptography/pbkdf2\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed?: false): Uint8Array;\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Promise<Uint8Array>;\nfunction signSync(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Uint8Array;\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction recoverPublicKey(msgHash: Uint8Array, signature: Uint8Array, recovery: number): Uint8Array | undefined;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-secp256k1`](https://github.com/paulmillr/noble-secp256k1), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain caracteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nconst secp = require(\"ethereum-cryptography/secp256k1\");\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp.getPublicKey(privateKey);\n  const signature = await secp.sign(messageHash, privateKey);\n  const isSigned = secp.verify(signature, messageHash, publicKey);\n})();\n```\n\nNote: if you've been using ethereum-cryptography v0.1, it had different API. We're providing a compatibility layer for users who want to upgrade without hassle. Check out [the legacy documentation](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nThis module exports a single class `HDKey`, which should be used like this:\n\n```ts\nconst { HDKey } = require(\"ethereum-cryptography/secp256k1\");\nconst hdkey1 = HDKey.fromMasterSeed(seed);\nconst hdkey2 = HDKey.fromExtendedKey(base58key);\nconst hdkey3 = HDKey.fromJSON({ xpriv: string });\n\n// props\n[hdkey1.depth, hdkey1.index, hdkey1.chainCode];\nconsole.log(hdkey2.privateKey, hdkey2.publicKey);\nconsole.log(hdkey3.derive(\"m/0/2147483647'/1\"));\nconst sig = hdkey3.sign(hash);\nhdkey3.verify(hash, sig);\n```\n\nNote: `chainCode` property is essentially a private part\nof a secret \"master\" key, it should be guarded from unauthorized access.\n\nThe full API is:\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  readonly versions: Versions;\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array | null = null;\n  readonly parentFingerprint: number = 0;\n\n  get fingerprint(): number;\n  get identifier(): Uint8Array | undefined;\n  get pubKeyHash(): Uint8Array | undefined;\n  get privateKey(): Uint8Array | null;\n  get publicKey(): Uint8Array | null;\n  get privateExtendedKey(): string;\n  get publicExtendedKey(): string;\n\n  derive(path: string): HDKey;\n  deriveChild(index: number): HDKey;\n  sign(hash: Uint8Array): Uint8Array;\n  verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  wipePrivateData(): this;\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n```js\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { hexToBytes } = require(\"ethereum-cryptography/utils\");\n\nconst seed = \"fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\";\nconst hdkey = HDKey.fromMasterSeed(hexToBytes(seed));\nconst childkey = hdkey.derive(\"m/0/2147483647'/1\");\n\nconsole.log(childkey.privateExtendedKey);\n```\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\n```js\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\nconst { hexToBytes, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Note:** consider using `secp256k1` instead;\nThis module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future,\nbut we're keeping it around for now, for backwards-compatibility.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1-compat\");\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nVersion 0.2 changes from 0.1:\n\n- **Breaking:** we target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support\n  older runtimes, use `ethereum-cryptography@0.1`\n- **Breaking:** we return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js:\n\n```\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nconst { toHex } = require(\"ethereum-cryptography/utils\");\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nThis library is in the process of getting a security audit.\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n","browser":{"crypto":false},"gitHead":"2fe90d980bb538c59e00eaa7cfdfdb91e54a9d9d","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"12.22.7","dependencies":{"micro-base":"^0.10.0","@noble/hashes":"^0.5.2","@noble/secp256k1":"^1.3.3"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"^4.3.5","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.2.4_1640354169622_0.5700063748956294","host":"s3://npm-registry-packages"}},"0.2.5":{"name":"ethereum-cryptography","version":"0.2.5","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@0.2.5","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"dfa636f0fa1978d962a13362d0850befb9ab8e7e","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-0.2.5.tgz","fileCount":123,"integrity":"sha512-aWvqiegXgSTwbuDE1DDnM7taLteLcHVHh5nMZnnD2dwlvH6w5bOxcdXW20oS+1aLDorDlrK1c82stB8jsLDN5Q==","signatures":[{"sig":"MEUCIQCMHgbUwLpTKSg23YsBiJt98zhRxkg7ARvZOagklYNM9AIgKkTpnOeGF5thfPLFVXncvx+eGoJ43guMNlhQ6dpZUOA=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":479754,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh1h+DCRA9TVsSAnZWagAAwE8QAIMwsSX8Hze2sBzUvPBE\nTbgVDcnTuZN0mv30mD+CFDvg39SB7V4pNO9hMgy8H3GrwG1ali66ExzZc8Qy\nhSwiEXURARs1QwHm0J43+teI9S1ka855doavyPig0JRItu61w8M47937xxzR\nOplxBWDShDiUb2PFXKVnBIPku7TtcF0Wne1Y0Xn4KAuI4/M3c6S7L7TT5HvX\nHQ+wns9kDD0jRXcdbfYbD3f7Z8Rum3dAGkHwx0qgET3jQcweBHAV0QanRvUo\ne+5ORJ91lTaEXTuGifqWmDgEVzkc4V4CWNrt7J8U3d7HX3RRc7y4PnTCfgB4\nN31s43ixNDAC2EoXtkztBiy37Uctq1hzOry7XrO1oroEeEe7vr8zNpk9Zxik\nOpoiIo/COxx9uOtZuW7hWZq1wFoaPOPzK5ZnR65q4PVoPzYUvg6+hiEllsBV\nHIyGdonlclRIfEZJc9vJRYZ7aa/yFn05Q57ZfST74LHfn7ET6qgwbZwr8ed6\nyMrxBK7zHb6b81osUm4k4uYrpy2yCaKImsY/c/JuW6LPik68LxbgbVAyGy1X\nFdnofwy+ZH82yItJSuxs/CJbGX5YGOMS/svZUSwo8YqZXWerXNaeEb590Z2z\ndiqqdC23y0XlVFGgNruIgrmI9JANPBugXF9NN+xRxSXtB+tQ5hrHT6ndtDsn\nlWAE\r\n=Rfjj\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","readme":"# ethereum-cryptography\n\n[![npm version][1]][2] [![Travis CI][3]][4] [![license][5]][6] [![Types][7]][8]\n\nThis package contains all pure-js cryptographic primitives normally used when\ndeveloping Javascript / TypeScript applications and tools for Ethereum.\n\nThe cryptographic primitives included are:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically strong pseudorandom number generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-phrases)\n* [AES Encryption](#aes-encryption)\n\n**October 2021 update:** We're releasing **experimental** version 0.2 of the package.\nThe module has been completely rewritten:\n\n- ~6x smaller: 4,000 lines of code instead of 22,438 (with all deps); 185KB instead of 755KB\n- 3 dependencies (pending an audit) instead of 38\n- **Same functionality**, all old APIs remain the same except for two breaking changes:\n    1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js. See [Upgrading](#upgrading)\n    2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n    3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n- The new module [has not been audited yet](#security), but it's in the process of getting the audit. Use it at your own risk\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography@next\n\n# Yarn\nyarn add ethereum-cryptography@next\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\n// KDFs\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\n// Random\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\n// AES encryption\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\n// secp256k1 elliptic curve operations\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\n// utilities\nconst { hexToBytes, toHex, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { sha512 } = require(\"ethereum-cryptography/sha512\");\nconst { keccak256, keccak224, keccak384, keccak512 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nconst { bytesToHex as toHex } = require(\"ethereum-cryptography/utils\");\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nconst { pbkdf2 } = require(\"ethereum-cryptography/pbkdf2\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed?: false): Uint8Array;\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Promise<Uint8Array>;\nfunction signSync(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Uint8Array;\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction recoverPublicKey(msgHash: Uint8Array, signature: Uint8Array, recovery: number): Uint8Array | undefined;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-secp256k1`](https://github.com/paulmillr/noble-secp256k1), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain caracteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nconst secp = require(\"ethereum-cryptography/secp256k1\");\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp.getPublicKey(privateKey);\n  const signature = await secp.sign(messageHash, privateKey);\n  const isSigned = secp.verify(signature, messageHash, publicKey);\n})();\n```\n\nNote: if you've been using ethereum-cryptography v0.1, it had different API. We're providing a compatibility layer for users who want to upgrade without hassle. Check out [the legacy documentation](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nThis module exports a single class `HDKey`, which should be used like this:\n\n```ts\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst hdkey1 = HDKey.fromMasterSeed(seed);\nconst hdkey2 = HDKey.fromExtendedKey(base58key);\nconst hdkey3 = HDKey.fromJSON({ xpriv: string });\n\n// props\n[hdkey1.depth, hdkey1.index, hdkey1.chainCode];\nconsole.log(hdkey2.privateKey, hdkey2.publicKey);\nconsole.log(hdkey3.derive(\"m/0/2147483647'/1\"));\nconst sig = hdkey3.sign(hash);\nhdkey3.verify(hash, sig);\n```\n\nNote: `chainCode` property is essentially a private part\nof a secret \"master\" key, it should be guarded from unauthorized access.\n\nThe full API is:\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  readonly versions: Versions;\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array | null = null;\n  readonly parentFingerprint: number = 0;\n\n  get fingerprint(): number;\n  get identifier(): Uint8Array | undefined;\n  get pubKeyHash(): Uint8Array | undefined;\n  get privateKey(): Uint8Array | null;\n  get publicKey(): Uint8Array | null;\n  get privateExtendedKey(): string;\n  get publicExtendedKey(): string;\n\n  derive(path: string): HDKey;\n  deriveChild(index: number): HDKey;\n  sign(hash: Uint8Array): Uint8Array;\n  verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  wipePrivateData(): this;\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\n```js\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\nconst { hexToBytes, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Note:** consider using `secp256k1` instead;\nThis module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future,\nbut we're keeping it around for now, for backwards-compatibility.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1-compat\");\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nVersion 0.2 changes from 0.1:\n\n- **Breaking:** we target runtimes with [bigint](https://caniuse.com/bigint) support,\n  which is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support\n  older runtimes, use `ethereum-cryptography@0.1`\n- **Breaking:** we return `Uint8Array` from all methods that worked with `Buffer` before.\n  `Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\n  browsers and node.js:\n\n```\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nconst { toHex } = require(\"ethereum-cryptography/utils\");\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nThis library is in the process of getting a security audit.\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n","browser":{"crypto":false},"gitHead":"752962147369318a232e081a24e714dd63618834","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.13.1","dependencies":{"micro-base":"^0.10.1","@noble/hashes":"^0.5.7","@noble/secp256k1":"^1.4.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"^4.3.5","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_0.2.5_1641422723132_0.8332759847724585","host":"s3://npm-registry-packages"}},"1.0.0-rc1":{"name":"ethereum-cryptography","version":"1.0.0-rc1","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.0.0-rc1","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"01010375f4a88b749514e88bdc0c2276f7d429a9","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.0.0-rc1.tgz","fileCount":51,"integrity":"sha512-QUCqtZEV5slNDM8YcFs24OmJZ/8sAwPwQoDWovj3yKye0Ho44eoZZSoWYxqPzUCT7dd3pCTULfKdM2ub04MLYg==","signatures":[{"sig":"MEUCIQD+45bZeRt891ik+c8LSOA3MKyhXKNpUCI213iOR/eSNgIgCJeSv9C5A1Zvq10GXUsY4UUZN3YU2YHnmCiAMEXVO54=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59528,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh5gXMCRA9TVsSAnZWagAAyhEP/2dSJ1/wl58s0AmIhchG\nk/PnnuCOAyq8HaV8n2+slq+bKGfc2Sg4HgC4tfG4R5RTFy1e0ex0g53k/PQ9\nE807eMsKskZLeAOw6E9bsaf26NHXErb8GfEK2ZVMiueN4EB/J/ctEukTOBBq\nHEdt/vmu1p51OcflZDw3p0HtHZnJJDU55korU0X+RX7oiopweZJmX6uzQzM7\nvJH498OIj2F8pi1lrSX3v8TRgGJeMUeTv3D1lyIlVUgPdu03zsbFVklK4jzZ\nV+2IZEQ83bpcF3K4uD+/GiTrbKVFMw0R+ZPa0dXpAjhZAiGqNzsLs55tnsY8\nEMyWHYkm7IO5ealN91CPWloTLxCB+meyzs0F3qjmII/9WUkBi3huCcVxTNXA\n6tP4TvOlrwxuPqdvwDb2NcNtje91Bf+medaQVYOUPrqnbPqk6ldGjeQb+ydN\nutGjDtg3diwa3jNQhPkmOs+lpmjkKkP9tcJy6IGM/hQahJxT+InzzhgTOSkc\nTGBXspg7DERVqgKkQOd4k8Wnb5KulclagJj8LtojObawsxwiXxrInJ2UO+nS\n4yV/INbi5XSLuW44uUXPj1GhupWn+scLeUYKdSZY5fqMctcNN5c5zWW2y7zU\nn/1K94vZwBiuChDONdxEwHZbDvz+vrtLXtkRkba7V3iZyixbWdJRfZFacf1/\n2SpZ\r\n=Lopi\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","readme":"# ethereum-cryptography\n\n[![npm version][1]][2] [![Travis CI][3]][4] [![license][5]][6] [![Types][7]][8]\n\nAll pure-js cryptographic primitives normally used when\ndeveloping Javascript / TypeScript applications and tools for Ethereum.\n\n**January 2022 update:** Version 1.0 of the package will be out soon. The module has been completely rewritten:\n\n- **6x smaller:** ~5,000 lines of code instead of ~27,000 (with all deps); 660KB instead of 10.2MB\n- 5 dependencies by 1 author instead of 38 by 5 authors\n- [Audited](#security) by an independent security firm\n- Check out the [Upgrading](#upgrading) section for breaking changes (there are almost none)\n\nThe cryptographic primitives included are:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically strong pseudorandom number generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-phrases)\n* [AES Encryption](#aes-encryption)\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography@next\n\n# Yarn\nyarn add ethereum-cryptography@next\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { keccak256 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\n// KDFs\nconst { pbkdf2Sync } = require(\"ethereum-cryptography/pbkdf2\");\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\n\n// Random\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\n\n// AES encryption\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\n\n// secp256k1 elliptic curve operations\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1\");\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\n\n// utilities\nconst { hexToBytes, toHex, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\nconst { sha512 } = require(\"ethereum-cryptography/sha512\");\nconst { keccak256, keccak224, keccak384, keccak512 } = require(\"ethereum-cryptography/keccak\");\nconst { ripemd160 } = require(\"ethereum-cryptography/ripemd160\");\nconst { blake2b } = require(\"ethereum-cryptography/blake2b\");\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nconst { bytesToHex as toHex } = require(\"ethereum-cryptography/utils\");\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nconst { pbkdf2 } = require(\"ethereum-cryptography/pbkdf2\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nconst { scryptSync } = require(\"ethereum-cryptography/scrypt\");\nconst { utf8ToBytes } = require(\"ethereum-cryptography/utils\");\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nconst { getRandomBytesSync } = require(\"ethereum-cryptography/random\");\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed?: false): Uint8Array;\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Promise<Uint8Array>;\nfunction signSync(msgHash: Uint8Array, privateKey: Uint8Array, opts?: Options): Uint8Array;\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction recoverPublicKey(msgHash: Uint8Array, signature: Uint8Array, recovery: number): Uint8Array | undefined;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-secp256k1`](https://github.com/paulmillr/noble-secp256k1), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain caracteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nconst secp = require(\"ethereum-cryptography/secp256k1\");\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp.getPublicKey(privateKey);\n  const signature = await secp.sign(messageHash, privateKey);\n  const isSigned = secp.verify(signature, messageHash, publicKey);\n})();\n```\n\nNote: if you've been using ethereum-cryptography v0.1, it had different API. We're providing a compatibility layer for users who want to upgrade without hassle. Check out [the legacy documentation](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nHierarchical deterministic (HD) wallets that conform to BIP32 standard.\nAlso available as standalone package [micro-bip32](https://github.com/paulmillr/micro-bip32).\n\nThis module exports a single class `HDKey`, which should be used like this:\n\n```ts\nconst { HDKey } = require(\"ethereum-cryptography/hdkey\");\nconst hdkey1 = HDKey.fromMasterSeed(seed);\nconst hdkey2 = HDKey.fromExtendedKey(base58key);\nconst hdkey3 = HDKey.fromJSON({ xpriv: string });\n\n// props\n[hdkey1.depth, hdkey1.index, hdkey1.chainCode];\nconsole.log(hdkey2.privateKey, hdkey2.publicKey);\nconsole.log(hdkey3.derive(\"m/0/2147483647'/1\"));\nconst sig = hdkey3.sign(hash);\nhdkey3.verify(hash, sig);\n```\n\nNote: `chainCode` property is essentially a private part\nof a secret \"master\" key, it should be guarded from unauthorized access.\n\nThe full API is:\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  readonly versions: Versions;\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array | null = null;\n  readonly parentFingerprint: number = 0;\n\n  get fingerprint(): number;\n  get identifier(): Uint8Array | undefined;\n  get pubKeyHash(): Uint8Array | undefined;\n  get privateKey(): Uint8Array | null;\n  get publicKey(): Uint8Array | null;\n  get privateExtendedKey(): string;\n  get publicExtendedKey(): string;\n\n  derive(path: string): HDKey;\n  deriveChild(index: number): HDKey;\n  sign(hash: Uint8Array): Uint8Array;\n  verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  wipePrivateData(): this;\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\nAlso available as standalone package [micro-bip39](https://github.com/paulmillr/micro-bip39).\n\n```js\nconst { generateMnemonic } = require(\"ethereum-cryptography/bip39\");\nconst { wordlist } = require(\"ethereum-cryptography/bip39/wordlists/english\");\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#pbkdf2-submodule) or [scrypt](#scrypt-submodule).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromissed.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nconst { encrypt } = require(\"ethereum-cryptography/aes\");\nconst { hexToBytes, utf8ToBytes } = require(\"ethereum-cryptography/utils\");\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Note:** consider using `secp256k1` instead;\nThis module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future,\nbut we're keeping it around for now, for backwards-compatibility.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nconst { createPrivateKeySync, ecdsaSign } = require(\"ethereum-cryptography/secp256k1-compat\");\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nVersion 1.0 changes from 0.1:\n\n**Same functionality**, all old APIs remain the same except for the breaking changes:\n\n1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n`Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\nbrowsers and node.js. See [Upgrading](#upgrading)\n2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\nwhich is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n\n```\nconst { sha256 } = require(\"ethereum-cryptography/sha256\");\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nconst { toHex } = require(\"ethereum-cryptography/utils\");\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nAudited by Cure53 on Jan 5, 2022. Check out the audit [PDF](./audit/2022-01-05-cure53-audit-nbl2.pdf) & [URL](https://cure53.de/pentest-report_hashing-libs.pdf).\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/travis/ethereum/js-ethereum-cryptography/master.svg?label=Travis%20CI\n[4]: https://travis-ci.org/ethereum/js-ethereum-cryptography\n[5]: https://img.shields.io/npm/l/ethereum-cryptography\n[6]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n[7]: https://img.shields.io/npm/types/ethereum-cryptography.svg\n[8]: https://www.npmjs.com/package/ethereum-cryptography\n","browser":{"crypto":false},"gitHead":"89bec53b812de4859eb14f57a16d046b2fe66da8","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.13.1","dependencies":{"@scure/bip32":"^1.0.0-rc1","@scure/bip39":"^1.0.0-rc1","@noble/hashes":"~1.0.0","@noble/secp256k1":"~1.5.0"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"^4.3.5","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.0.0-rc1_1642464716609_0.8888739486144919","host":"s3://npm-registry-packages"}},"1.0.0":{"name":"ethereum-cryptography","version":"1.0.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.0.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"3ee1b54befb375e2fea93b9f93c4802ecba82609","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.0.0.tgz","fileCount":51,"integrity":"sha512-udvlqhp8T4uJpWhhg8IU4ch29uNH6XpT+QWdFWMVctsvMx2GpSkDvsmfKXrx4qNXMJQdt0O7phkKBQ9JcyNDsA==","signatures":[{"sig":"MEUCIQD7Hb/eq/CFjefljafybnHeCKxWlq6Tz0r8ShukbKxjcQIgfkdpkPhgetmeXK9HERhpiJxyZrIiXkDKRGj+1oTTZW4=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59645,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh8ZwDCRA9TVsSAnZWagAAO5MP/1LKVRyWyaL/s7jtP2jP\na14KK/6anELq/akh4y8jzmUDJIZV7MiEhiQhnvOHI8Q//8cwXqpQxQl/Jv2g\nUnFz3Aw7SlN5/qJ0CvqAWjmwACvirU+NyeqTIsxZ6mk+T0wkckwhpkneS1I+\n0C4G7FH+0ysK1kqYkcrEsi+qlLI9ZmhP2zjRxi4ImgAceEy8LimEu86+JU+a\npRm7uf9LQkfEpqhiBPAOASKkbdpR6lyTQ5J0GWj9XyGe2Mtkk4asgBpiRS7x\n953vr/v6o4Qo74Ls50PcCSNE7vZFXpApRx00cPDetpdBCKwHC5kphlIvCjlz\n+Xxb20Is1EswHBU2nceuOXezSTwQKmy7pWk3PjdfU8NkZjqouuX39WSdSLdE\ncgDfFkPrBeA6gXA+qokxD7AUCgKyzI0j67RGBskj2MAcBzYpgr5gGIJJuRi4\nZY+3nzmfRzjulKqVYo8GF61FyYZVEl4zsSo0z+gL11rsbU40jcb1jWXS9xWE\nkSizYJcvmil1SYpnYauelL/pOvXbMEXM64UCyux1Rm2GbGy6BTDZ0eD+c30M\nxhh6I2pJCTyOupIK9Sg+JPSRS73RE6tsOqHy+qwqRD4CACoLhO65kKPzSMmP\nmD/zL9C2UaW6xwVKoozfHsvn/NryNff5BYrIu2hGoNaWA43HBuz+ZjQH38sc\nhUJt\r\n=0gSb\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","browser":{"crypto":false},"gitHead":"ef958231d4146e03266472da9ce8e0baa27958cf","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"7.20.3","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.13.1","dependencies":{"@scure/bip32":"1.0.1","@scure/bip39":"1.0.0","@noble/hashes":"1.0.0","@noble/secp256k1":"1.5.2"},"_hasShrinkwrap":false,"devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"4.5.4","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.0.0_1643224067030_0.7808664408970858","host":"s3://npm-registry-packages"}},"1.0.1":{"name":"ethereum-cryptography","version":"1.0.1","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.0.1","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"4c91469484a038075045961d78722db9b54e62db","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.0.1.tgz","fileCount":51,"integrity":"sha512-AVvqCi6yrUDhmnOkgcyyEDUF/wMtNmP7jHaNmtEZPw+eocb1GJTAhe/1SCwXrezGX6N0o0/o1C2w6NZ6DPfg4A==","signatures":[{"sig":"MEYCIQCj1vN9YRfj8r972ej3OyIRvFna5wvR9xmKLmKIBYLPQgIhANnjLhEmTyt7vFEnweeHdTnZFofwCsiyDXOF2UrlD2GG","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59649,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiDCIrCRA9TVsSAnZWagAAbs4P/3oA5lKDYnWz2tNKDz6B\nIKF0jzdnU+hulzViiHPjKgOYrpO63UvTbz7eoXV1f6gUEYivllUo4uVVlPQ5\nsh0/GumsaZhgawXTni4EH8BWX8IR7Jt29rbZZA+ZdWwh4Xnb66YJm4eF7Tqd\nymkoP9dpb3A6n0chmtvKk/aKse2vN/PD5fV2XE7SAM0/U/8A5AytWAZ3tr2c\nOfB0MdS/ceTZOkfrX3x8BGyTBj3Z9xmOiZASjEoyVEMgoAOIUWVlnqy4+hjI\nRV0WN2Y3+ostL3bL9kqbh7eVFWv2VxMSr2uDo5FOLu1Rs2mkta1mzqk+CDYK\nXwvUjEsTK6Y52OAA0ISZrfmNF0tMxl4uo27ib41i+ZSLOF51jISsPX/Zwclg\nTb+WtcDWOYe8J8NPOI7HWSYcMTeiXzMN75yTQNY/IrpZhuHwmIqGNTh5H6jc\nPnS86XdnI48U/VS26kiKxo32UZgUjZG9HvbmWrzVQI5SuPBYQ6SDMLxaEJsb\ndiYYjaIy3aIaBWfeA9p3gzdb97ChdFt2em6H40uMBHkRy9YOfPoynZietumq\nPhiiQLSkZwg2erYvKvRLAcbBWu2e+UitJpGFIbgbBamUW8lakI8mSICAEirn\n5vOAjp80eJeuxGU7Eeo+N+hbydal1Ep7aBTtluG/Do/tq70MLrdpaL5rNpqw\n+dUT\r\n=PhAb\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"cfc59b0ff06f4f43055139cc5d78c6f1f6826119","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"8.5.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.13.1","dependencies":{"@scure/bip32":"1.0.1","@scure/bip39":"1.0.0","@noble/hashes":"1.0.0","@noble/secp256k1":"1.5.3"},"_hasShrinkwrap":false,"devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"4.5.4","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.0.1_1644962346905_0.40813301400382396","host":"s3://npm-registry-packages"}},"1.0.2":{"name":"ethereum-cryptography","version":"1.0.2","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.0.2","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"180b2588d50a4f88aac98f1423b7df961c84ea62","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.0.2.tgz","fileCount":51,"integrity":"sha512-/8ifnvho+3iXSns/3ucFyes/kuK3aHFpxLEUd2Qlqe1VX5wWEBJV7SuHG5NgeYexg4dDCQlmRhfQYEzznsqJYQ==","signatures":[{"sig":"MEUCIEpTrr2qpPZWHhhNxRho+lAK/NaZVfdoufLyZVf00GhmAiEAp2e8VlEyH1IV4ZLXu/aveWt1Cn2FwFRj5+2sJXu4F04=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59827,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiDlo5ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpNfA/+Mq4bow7mUT363b5YegGjUVYeOGQ6CVURyubY/XDfqf3hta8k\r\nMNU1wtUTPOz0CjT6cMzA/6yQj8OdopqLvB7WgqxfZDsuAd+Z7oE1tDNfpG9S\r\n3fDmMYakbDGVXld+Mtu38OpZ2C2BwJIkBjadowIFv2xmwiHp/xeqQmsJku6Q\r\ndL3+gbkGNCMdx0rAKBl2SPlG7Vc+FMTdHvjx3NUKVJ2EioftbZcMl8VxDt1f\r\nHKVL0wc3UgoAaK5Y8nAye932ZOZXMSOtk9tJECX3OPsYI6D6BXjQDTfDDeP4\r\n4BDGiKctQaFH4u8DjMHqcxAK5XHXsfe4eGj+ql+900ZqvgfR0TSGWBkU7B8T\r\n4cLtma5y8AU5JIEXarZc69LoiKzx8PMON2li7TZOJxPZCcRtofe14CH2hw29\r\njN6sYC3AiglZ3uBy0UYh8K7oTvk6/xcP/CtRkzX0BlKhnpDNaqG6iAlkehod\r\n/5/jf4bBUTmlx0g6nVo87t6ltMx1OAu51p5thB2MeA0aapz3zAqBLP01F6dZ\r\nrb+G5lwd4XCNzn2eW8gt8xVyHMWf1KhAkZyuIoUQBH0yVZSVV1Z+LkvdSpPT\r\nVmtfc9i9Lgx+fsABbEAjAEBDUWQKE5eHzydKHpM5GLFc9Grte6bH9QAc68Ly\r\n3EIVUDa+oU7OtmD455i9YMYLenu+GWnDwac=\r\n=202o\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"cd467b978e93297c26f3a659c03c9178b9bb60b0","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"8.5.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.13.1","dependencies":{"@scure/bip32":"1.0.1","@scure/bip39":"1.0.0","@noble/hashes":"1.0.0","@noble/secp256k1":"1.5.3"},"_hasShrinkwrap":false,"devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"4.5.4","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.0.2_1645107768967_0.8023552414363131","host":"s3://npm-registry-packages"}},"1.0.3":{"name":"ethereum-cryptography","version":"1.0.3","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.0.3","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"b1f8f4e702434b2016248dbb2f9fdd60c54772d8","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.0.3.tgz","fileCount":51,"integrity":"sha512-NQLTW0x0CosoVb/n79x/TRHtfvS3hgNUPTUSCu0vM+9k6IIhHFFrAOJReneexjZsoZxMjJHnJn4lrE8EbnSyqQ==","signatures":[{"sig":"MEYCIQCVffSmLi+0jxkVawyhM9O355N5J41Ps0lN4gs9B0+zGgIhAMv2eNkb2362rcUARQL75dCXSDDHBrvI0uloRNNN7L6U","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59827,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiEpl1ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoDphAAkgW2S6l8LvyFhLFydKyEdFV+7rhHxNybOJ+q3cej/IXMRdfz\r\nbPtyTERYCf8iKJURiu6dMR+BvKja2TDNAIqO9jotHaO4uiBWy2n1As4YxRrs\r\n1NJu6u0I+tT5kI+3w0hFq7UGrsgAgydFSjjAOVh0s+5UjOuQjW/HgU8oO6l5\r\n5/3oWHBoCYXQBkMPYzgzkToZOBsUvlgOJszUEc52gwgJ4UM7EKWyDCb260S7\r\ndzoRaOBwdqEmqtgWBg9QGtDXKOuiK3KBnyPLbi9YBhPWlN7Np6vBWq/FeCbS\r\nosuqEgXiKJ5gvAsKQkbDoDsnM8P+tDzSj4mtpoBk/GQ3idNw/RyWkdZpIyyS\r\ngXh3tXR3TVmzwqbZVoIqtU+Ip4SS+UAkle9+CtPY5oAZl9p9K5GMBdnnWxv2\r\nJGNJ++XhdDy2wey79eJO/negAH0sFes5a+hlB38Ye04FsYFIhba05wzgL3Ui\r\nWBe4M83/VI5/TXuwzYfXseFqyAjC34MARtD2CI5D6Svyc3ZVwL73w2qFBv5g\r\nnlBir9caMn1Q+dSnsG7L9UA7RfJQZ/b/rIsh1wLbVgqxm363M7FlZtPnn4Y4\r\nSfhLWx/opY188Zh1/vWSDYMExIJpDGqQBP7hCl+6rgjCktqeEWojstl0NJk9\r\nmY4MvBDS6LTPFdz8LRrMSGuEN0WUmdBH7uM=\r\n=VEed\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"da839ad88eac84ba68b5c14957646c6ee18fb011","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"alcuadrado","email":"email@patriciopalladino.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"8.5.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.13.1","dependencies":{"@scure/bip32":"1.0.1","@scure/bip39":"1.0.0","@noble/hashes":"1.0.0","@noble/secp256k1":"1.5.5"},"_hasShrinkwrap":false,"devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"4.5.4","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.0.3_1645386101155_0.32844990923552775","host":"s3://npm-registry-packages"}},"1.1.0":{"name":"ethereum-cryptography","version":"1.1.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.1.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"7048d184ff365a5255ced5cc9eb7682a273c4db7","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.1.0.tgz","fileCount":51,"integrity":"sha512-wyNVTBR4wIR2yoXdMv4Qt44mTVBpPgSW/DQCTmNO6nQluwpyrAIvmL4mxPbziFuc6VWJQa3rwUxn0nUFU03nyQ==","signatures":[{"sig":"MEUCIEtWDcERnRLfouslmgjU+NspWCi3m04nZtfO7Rt/pBEdAiEA6WrMvWZcpx6RURomnrOjhhcQI517Nr8ICVJsX8/cHF0=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59466,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiqdZYACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqJ/xAAohQdqhloAwtjFQ8US258WsbTlf2CrabEKk5AbGppmDHnMFki\r\nJs2p6JLTwMGNflFPL4/4APZ9BHKKoJip5HI2BTabUSiopf7l3PR+Qj+FUkAb\r\nc0LFbbt/eASXHaRGjWf1hvj2wvGGw5KQj/MQxEOPdMD2hNYMJS1r0nII2Ugg\r\nDZfSgW5N5Hu1Xcb+hCQc+Tyr92HjdmJlk1DbzoXe/MoQ3dMVNJ5wG7QLj27H\r\n7xxnYNnyg//6YNkFuPUpxc1zFBNSVS1kPUyCyQ/pYJQM/fww51IjHK63coaw\r\nZ9cqo+031DQjbsb6rIFd5HGrycVV/doogZeu2nF70/5S3dRPG+T0WUnFzN72\r\n3r/OSXHgS9bBD2kT6NLeMLEqwnz3J9rDCiL60gLWRngx9Q8eOdDlAmovjKhg\r\nXniFUirTJM3yxchSSqezt3nZuyegxXR+7ElZvuJScoKRszG2MjP3AVzwlaZ4\r\njKfAIIjKIWaIrs3g5s/ZKhOACCiWKDXUMJcq89bIKsDPjAwuKtghoUWWlJ8b\r\nfO8338+Db/lO5NVhXtWa9GveHrdLzDGmLhIJ9tsC+j1O0MtETLCC69NrhsWc\r\ngkag1U+88ERloV6viuNYkgVvxH0vfxtwP7WvgSPmKGtKtmuEREqDzI80Mgxe\r\nsesbPAvJ49DPeXQ+2HigYms4yvo8zHelkng=\r\n=GNKQ\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"60a004f473c17b6b268e6e6b9929d34edeef7c83","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"8.5.5","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"16.15.0","dependencies":{"@scure/bip32":"1.1.0","@scure/bip39":"1.1.0","@noble/hashes":"1.1.1","@noble/secp256k1":"1.6.0"},"_hasShrinkwrap":false,"devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"4.5.4","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.1.0_1655297624485_0.2707397334305339","host":"s3://npm-registry-packages"}},"1.1.1":{"name":"ethereum-cryptography","version":"1.1.1","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.1.1","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"10d4b4d48b8caa4472c7be1b421129c601b94cb5","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.1.1.tgz","fileCount":51,"integrity":"sha512-zp6caNCfG3S2LtSjCeZtOjfRCXNoPv16XTBzM/jOVVlWmO1m59QZdp+VpI8Org4UwPTJ/LzI/XbRHKqi4cMRVg==","signatures":[{"sig":"MEUCIQDos/MmrxGInTczyP+7WqLZebYC61UKavbn2ZUdq/lifgIgc7To5oZJ+PczYfUd1rGOEptEpG8aBbQiwSOLj/SffoI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59466,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJizyi4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrHjQ//ev/0MbaPf304AESGAtmpLUEW+bab/Z+q+zWpzfA/lKNTbsSs\r\nvg/55wSxEfVoApSO+MrbyNPn9TdgIngHtTLDXaj6a1L3esslIcc8FxFH+z18\r\nxQ6iSrSS8XH0tMLtLDtNaGZ2R6kB3wT7nw6hgRYwl+lyqXswUmadlPO80KlC\r\no4uDsRWVwB9NZe5QvfXkNL73M6xfB7vkI5Pq7YEERtHiM0Pgf/MvY4IdXJFQ\r\ny8JWOGb1mMzKzPGUT8zI6Fc1O5s4d78OQCps2vjmfjB/Q2tMFrdZCShJxWKE\r\najszey4qlrrGRxVYqt1gXc2p2b/xkKVmrh0DDGRm2oMXBFQuFQDS8FowiLtI\r\nAnkAq6eflVPB3fMgAkoC7W3/tIKEu3yFxBKD/+7t0ztZrd04L64no9o2L8I6\r\nw59xkalFFktc5cqd97e4mT9E7V2NUrcmpndFqsjk+u0TJ8DW3xuYfMCxURF0\r\n7RuqftTrhe4Qe8FfFjz50eG9gN/BXkHoTXThLF90y15nChxahDA/USzQg9/U\r\nqkNZ6WELQ9XtxSVzo+499u9kBu0gP4CINuDs1xOt7WlT8En0nw1k9KftkKon\r\ngcYdoQdNs+EJT/ySGUkSWc32SMuAhCF7d8SbkBTLFguLUADRz/QaTpQ7wonV\r\nuom0OiElOuQ1VAKg4B/TKK7JFzLH+gzAZbU=\r\n=w7re\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"a34687db2231be1921893e123671608782f6a23f","scripts":{"lint":"tslint --project tsconfig.json","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"tslint --fix --project tsconfig.json","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"8.11.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"18.3.0","dependencies":{"@scure/bip32":"1.1.0","@scure/bip39":"1.1.0","@noble/hashes":"1.1.2","@noble/secp256k1":"1.6.2"},"_hasShrinkwrap":false,"devDependencies":{"karma":"^4.3.0","mocha":"^6.2.0","parcel":"^2.0.0-rc.0","rimraf":"^3.0.0","rollup":"^2.53.0","tslint":"^5.19.0","ts-node":"^8.3.0","webpack":"^4.39.3","prettier":"1.18.2","browserify":"^16.5.0","typescript":"4.5.4","@types/node":"^16.9.2","karma-mocha":"^1.3.0","npm-run-all":"^4.1.5","webpack-cli":"^3.3.8","@types/mocha":"^5.2.7","karma-mocha-reporter":"^2.2.5","karma-chrome-launcher":"^3.1.0","rollup-plugin-commonjs":"^10.1.0","tslint-config-prettier":"^1.18.0","tslint-plugin-prettier":"^2.0.1","@rollup/plugin-commonjs":"^20.0.0","rollup-plugin-node-resolve":"^5.2.0","@rollup/plugin-node-resolve":"^13.0.4"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.1.1_1657743544123_0.9920001522524455","host":"s3://npm-registry-packages"}},"1.1.2":{"name":"ethereum-cryptography","version":"1.1.2","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.1.2","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"74f2ac0f0f5fe79f012c889b3b8446a9a6264e6d","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.1.2.tgz","fileCount":51,"integrity":"sha512-XDSJlg4BD+hq9N2FjvotwUET9Tfxpxc3kWGE2AqUG5vcbeunnbImVk3cj6e/xT3phdW21mE8R5IugU4fspQDcQ==","signatures":[{"sig":"MEUCIC3+pUoWpQ/jHlmEuKg6avWoE3tGhyMZqexiWm3stDUfAiEAkqEEIwQTNlHolVp6OI0ArrFmhAuQj8v8ZqKHmV7phF0=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59561,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi0DujACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpK5A/+MMWvdfSN0CFp7i8/8d45RklMefdxfPy8wpN+mR00COjzw5FB\r\n6AIaMSOZYbDq+NvBEkLGofF2isL9P5tajugW15RdM2cvQ4w0SGvMXsY/RPRq\r\nVpJjuEm5KXZ4aUUTl3VBaQ2R0CQNa+sf7Mu+W4dcnfZvyuLM1Z2XFzTPm6Xw\r\ni6/TrEwzp80e+doOOrxdfqSCK9gWTnyzhQoFyiJKpxRPXFVTLcEj27BuOZL2\r\nmvGlPlOdUx8pBelk3UEicdorIANbSrEOZU8ndBPJObG9KE8gTcydTHBkv601\r\nkks+fCdQ+wEUsH7T/F/6fNZJiI4k8gnNNhGXtA5fcZh2yOaBnY3NZZfV7Qzd\r\nmjG0qtmzwxmd0QLtLBrJZ1JLOM36Cbacg7ZkzaNEwyFHWSnucDw9xkAhiNcm\r\nhMwljtNQ2EpfVDolDt2Ng148bqaXptDzN4Mn3whw8xIC0KKEj3ObEwrRplH9\r\nbz5+yFCdCJe4EfY9eCbbE3oIw4VYoj6mVkmsGSp1xPlx9UoCsA5//VZV+1Ap\r\nacdr8FXv80cs6R9RzDMYQLkryz3+/IS4fu+ecEEyCq1UM2sfSkBrmfy/OhDq\r\nYvtKyyL1YWz+BHYEHji0huH7K8tQGQfojCDzT3TDQbbe6HRUBLoAjsg9P5te\r\nWq7gATXeJdgTTIB6dPSqGXpopSGOJTkhaEI=\r\n=sSxz\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"651972b94cc7133606c81f57da71c135055b4d52","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"8.11.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"18.3.0","dependencies":{"@scure/bip32":"1.1.0","@scure/bip39":"1.1.0","@noble/hashes":"1.1.2","@noble/secp256k1":"1.6.3"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.19.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.73.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"4.7.3","@types/node":"18.0.4","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10","@types/mocha":"9.1.1","@types/estree":"0.0.47","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.1.2_1657813922977_0.41424029290082864","host":"s3://npm-registry-packages"}},"1.2.0":{"name":"ethereum-cryptography","version":"1.2.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@1.2.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"5ccfa183e85fdaf9f9b299a79430c044268c9b3a","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-1.2.0.tgz","fileCount":51,"integrity":"sha512-6yFQC9b5ug6/17CQpCyE3k9eKBMdhyVjzUy1WkiuY/E4vj/SXDBbCw8QEIaXqf0Mf2SnY6RmpDcwlUmBSS0EJw==","signatures":[{"sig":"MEUCIAw5MgjRDmdDpJM71FS46r4yisCsh0bmToqzsbLYByhlAiEA271fo8yD9WJuuFORpMIrTqGwamXfweBQZkapxueh95c=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":60097,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj4SJgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrJ8Q/8DiO/DK4PHolyHuS+H5JVDJwWIRmJQ1+o+adDrKd0dZ4FI9q2\r\nVZ1dM9IXLCFwfzJe2eu/zQ842wxT9FNP23u1F/tTwa3SBUYRErP6thT2T4hi\r\nP78ggAm0xhlWs1xKbsM180ZNb9zW8HZZK7cusg0IjsHhR0SQM6OSHmk+4448\r\nQWz/VrFBWxKWb/CLKFn68bQJUMq3QpqQ82KcMEQjgRCwdgAoI5j/YIhSBNUH\r\n1sDILUIVkXr2UcK/bCYPgkKzgdcA9t3VvJyMBfnIaQb8r6jN3kYe2JadWKf1\r\nM+DZckYfQDeKSTViExUNso9t6LiV8mDsXMhsYLPhpkRIe1CvUtW4dJEzDu5W\r\nODYXjSWcyxBwbKfyLOFWUOvVdqmmksazHHJULS8sBldU9nf+/S0Df1TWQ91f\r\ne7Af9OLp+Wxmb9Do4mgzT+ZYn+7HeNlgCnjcHcKbm761OJwlOA0QbNKFslde\r\ndYaSM40F32QhkX4PlAwRSyOW/lGUk1euHeu4IAvylwGJXXQX+7+Ua9AGXblx\r\nxS4JLz3ehfe0kGyp+IPwaQn8Kl9D9Geoeeqatz910FhFPlTWYx3VSZ56eVnk\r\nCYf/jUm01GvwzE8ccJHWg7JXW5yXl42MG4wi7NTX8WpyCjiRN23Jlumqpogf\r\nf4zJp/7rcE/ylb4liDwo1Hbb7j4VeQbb3+Y=\r\n=U2GX\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"0cf402cc4ec6c6acc505b81f244c0278b366b95a","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"9.4.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"19.6.0","dependencies":{"@scure/bip32":"1.1.5","@scure/bip39":"1.1.1","@noble/hashes":"1.2.0","@noble/secp256k1":"1.7.1"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.19.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.73.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"4.7.3","@types/node":"18.0.4","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10","@types/mocha":"9.1.1","@types/estree":"0.0.47","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_1.2.0_1675698784659_0.20114797693359776","host":"s3://npm-registry-packages"}},"2.0.0":{"name":"ethereum-cryptography","version":"2.0.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standar","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@2.0.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"e052b49fa81affae29402e977b8d3a31f88612b6","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.0.0.tgz","fileCount":51,"integrity":"sha512-g25m4EtfQGjstWgVE1aIz7XYYjf3kH5kG17ULWVB5dH6uLahsoltOhACzSxyDV+fhn4gbR4xRrOXGe6r2uh4Bg==","signatures":[{"sig":"MEQCICBy/UBMYAG2/wpGBA0Tht9aJ8CsoQQ3IprOKEUFAt+uAiBrC5FbcUT/QIQHppaTbGxhQ7MFsta3ZynFoC64s5N1CQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":58040,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkOG7jACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqs0Q//Q5KeznqnQIx+xZH3v18kesCGEfbsouNKOMFPUk0uXOmOFS5V\r\n+rGk+/WH4HVgFQiS+QuJ/OAk1U7fIeaqB5tIaRdBy9hL8KT/v6Xf3g3bGXga\r\nJ09/DsV7z9z52D548rHLQ56e//qSMKCY2A0kIUggunnZkc2f07bPnMIbx3g2\r\nIY+mxCoClY5xr//v+w5jykaXnCWNcf1Kuj7EhuB+3YQulJAGMNCOexYPq1GX\r\n/HsfQv3DO2Fd2jTbMKxyFUhhTv38ky3uWQ2fy5qQPiUBO8gWApMH3eAmiYXL\r\nzpjvA7+q6Sklrwfj7nui3BI8FegRQntdxnHbLgN4saQUbagOwo41sOJTqije\r\npdQwHiR9eqv7DICV0J1oYGsZs1UfFWY/VYFuerS/xN1mMpI5YhbUE4YQbDNN\r\nFUFXP9YpZ1BtOXzMsi1/gwS4gsXsxpe4fLDk64EyveEdMoiiRlxeqavh0a/0\r\nAP41aUdCPUj0yS0RK895gWt8Fg0fgTs6zWRcRQ0J5Rx4gTDrW7pHABxHDPmO\r\nQdGzGa8WOLL/lmkO24jURv7/jfznrvpdr65BOUhRx8xVML6mvVW068Pk6llD\r\nWnjbjQxSi/ry3FGUQdaaw/p4MsamKubp5BXqpJeuvLfw8xsqgT5rrKhEOrGk\r\nqlzL9wCB/L1g8G9kVeT071YsfR6fv/unmFk=\r\n=gZ+m\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"gitHead":"b973b769857ad21174fe6f6fb6a0ec11e7e7b077","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"9.4.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"19.6.0","dependencies":{"@scure/bip32":"1.3.0","@scure/bip39":"1.2.0","@noble/curves":"1.0.0","@noble/hashes":"1.3.0"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.38.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.76.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"5.0.2","@types/node":"18.15.11","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10","@types/mocha":"9.1.1","@types/estree":"1.0.0","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_2.0.0_1681420003531_0.5173161362778596","host":"s3://npm-registry-packages"}},"2.1.0":{"name":"ethereum-cryptography","version":"2.1.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standard","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@2.1.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"8b9811a21a6423bba190e52978961b50d2f530fd","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.1.0.tgz","fileCount":76,"integrity":"sha512-QX4uRmoGJdxDPsncrOaeVCC7JOOvMzUXkvo9Xasv2EKV5RwZgZxQ9s5yEbWSB1MSeso362hWWRPV/FYKNLditw==","signatures":[{"sig":"MEQCIGFRXJdWF7+N/Qci1IT1kEAzV6jz2jWO3UvU4AwleOkHAiB9T17OqX65ZJbbmIrRDXsTV6dq0nY3VZTD1WzlQoHRgw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":80127},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./aes.js":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./bip39.js":{"types":"./bip39.d.ts","import":"./esm/bip39.js","default":"./bip39.js"},"./hdkey.js":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index.js":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils.js":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./keccak.js":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2.js":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random.js":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./scrypt.js":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./sha256.js":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512.js":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b.js":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./ripemd160.js":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./secp256k1.js":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./bip39/index.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./secp256k1-compat.js":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./bip39/wordlists/czech.js":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/french.js":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean.js":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english.js":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian.js":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/spanish.js":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/japanese.js":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/simplified-chinese.js":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese.js":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"}},"gitHead":"3bc18662e7573d056bbc4f2dcf2637d20d760039","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json && tsc --project tsconfig.prod.esm.json","test:node":"mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"9.6.4","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"20.0.0","dependencies":{"@scure/bip32":"1.3.1","@scure/bip39":"1.2.1","@noble/curves":"1.1.0","@noble/hashes":"1.3.1"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.38.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.76.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"5.0.2","@types/node":"18.15.11","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10","@types/mocha":"9.1.1","@types/estree":"1.0.0","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_2.1.0_1689034254810_0.10902014799398141","host":"s3://npm-registry-packages"}},"2.1.1":{"name":"ethereum-cryptography","version":"2.1.1","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standard","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@2.1.1","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"23383799b67a46aafaee69097dd9c5f732699101","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.1.1.tgz","fileCount":76,"integrity":"sha512-XdvUog4BpUkEcJ0GAjr2KTjibd/i2yh5+5KSL/KFNz9MTYwiIjdeA8ZynENTZmaT8lebbnozsFwwsn33y+/TtA==","signatures":[{"sig":"MEUCIQDi/a4eKiqn9U3/jRjIeykWFzkFiVk99+aL6Zii/FRXUQIgeNr/q6Mt3yvAhadUqn2qddD511o19mLPITNgMU2Oem0=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84236},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./bip39":{"types":"./bip39.d.ts","import":"./esm/bip39.js","default":"./bip39.js"},"./hdkey":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./aes.js":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./keccak":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./scrypt":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./sha256":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39.js":{"types":"./bip39.d.ts","import":"./esm/bip39.js","default":"./bip39.js"},"./hdkey.js":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index.js":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils.js":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./keccak.js":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2.js":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random.js":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./ripemd160":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./scrypt.js":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./secp256k1":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./sha256.js":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512.js":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b.js":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39/index":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./ripemd160.js":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./secp256k1.js":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./bip39/index.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./secp256k1-compat":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./secp256k1-compat.js":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./bip39/wordlists/czech":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/french":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/spanish":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/czech.js":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/japanese":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/french.js":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean.js":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english.js":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian.js":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/spanish.js":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/japanese.js":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/simplified-chinese":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"},"./bip39/wordlists/simplified-chinese.js":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese.js":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"}},"gitHead":"7d4d7db82032e01dd53c9c3b943b7c995a855fee","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test/test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json && tsc --project tsconfig.prod.esm.json","test:node":"cd test && npm install && cd .. && mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"9.6.4","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"20.0.0","dependencies":{"@scure/bip32":"1.3.1","@scure/bip39":"1.2.1","@noble/curves":"1.1.0","@noble/hashes":"1.3.1"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.38.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.76.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"5.0.2","@types/node":"18.15.11","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10.0","@types/mocha":"9.1.1","@types/estree":"1.0.0","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_2.1.1_1689117535290_0.3246283643797132","host":"s3://npm-registry-packages"}},"2.1.2":{"name":"ethereum-cryptography","version":"2.1.2","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standard","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@2.1.2","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"18fa7108622e56481157a5cb7c01c0c6a672eb67","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.1.2.tgz","fileCount":76,"integrity":"sha512-Z5Ba0T0ImZ8fqXrJbpHcbpAvIswRte2wGNR/KePnu8GbbvgJ47lMxT/ZZPG6i9Jaht4azPDop4HaM00J0J59ug==","signatures":[{"sig":"MEUCICj9YBkLYufRohWKThdTZy+ZNuB2zYi7CEWnQNZVcdTCAiEAhx+M+SSckt6pcaZ/RYWRQEqlxFZlAPxmhZzVaVjg6lM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84272},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./bip39":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./hdkey":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./aes.js":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./keccak":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./scrypt":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./sha256":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./hdkey.js":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index.js":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils.js":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./keccak.js":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2.js":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random.js":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./ripemd160":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./scrypt.js":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./secp256k1":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./sha256.js":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512.js":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b.js":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39/index":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./ripemd160.js":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./secp256k1.js":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./bip39/index.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./secp256k1-compat":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./secp256k1-compat.js":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./bip39/wordlists/czech":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/french":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/spanish":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/czech.js":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/japanese":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/french.js":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean.js":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english.js":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian.js":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/spanish.js":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/japanese.js":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/simplified-chinese":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"},"./bip39/wordlists/simplified-chinese.js":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese.js":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"}},"gitHead":"77cdf136daf47210f3a711c3b863f7899d0a170c","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test/test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json && tsc --project tsconfig.prod.esm.json","test:node":"cd test && npm install && cd .. && mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"9.6.4","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"20.0.0","dependencies":{"@scure/bip32":"1.3.1","@scure/bip39":"1.2.1","@noble/curves":"1.1.0","@noble/hashes":"1.3.1"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.38.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.76.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"5.0.2","@types/node":"18.15.11","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10.0","@types/mocha":"9.1.1","@types/estree":"1.0.0","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_2.1.2_1689189861224_0.11011645119869806","host":"s3://npm-registry-packages"}},"2.1.3":{"name":"ethereum-cryptography","version":"2.1.3","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standard","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@2.1.3","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"1352270ed3b339fe25af5ceeadcf1b9c8e30768a","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.1.3.tgz","fileCount":76,"integrity":"sha512-BlwbIL7/P45W8FGW2r7LGuvoEZ+7PWsniMvQ4p5s2xCyw9tmaDlpfsN9HjAucbF+t/qpVHwZUisgfK24TCW8aA==","signatures":[{"sig":"MEUCIQDIq+1e9jSApz1sPZjx4C9hcnLig3neBLnf7XU/8NRA0QIgLpcFh4HZY7a2kuRDwO9IAzlLywWETiLY9XcxbnjXLNY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84535},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./bip39":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./hdkey":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./aes.js":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./keccak":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./scrypt":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./sha256":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./hdkey.js":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index.js":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils.js":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./keccak.js":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2.js":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random.js":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./ripemd160":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./scrypt.js":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./secp256k1":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./sha256.js":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512.js":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b.js":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39/index":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./ripemd160.js":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./secp256k1.js":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./bip39/index.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./secp256k1-compat":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./secp256k1-compat.js":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./bip39/wordlists/czech":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/french":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/spanish":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/czech.js":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/japanese":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/french.js":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean.js":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english.js":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian.js":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/portuguese":{"types":"./bip39/wordlists/portuguese.d.ts","import":"./esm/bip39/wordlists/portuguese.js","default":"./bip39/wordlists/portuguese.js"},"./bip39/wordlists/spanish.js":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/japanese.js":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/simplified-chinese":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"},"./bip39/wordlists/simplified-chinese.js":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese.js":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"}},"gitHead":"7ba5c6f5bb7d7355b4435277bc9de6ddef3d722f","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test/test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json && tsc --project tsconfig.prod.esm.json","test:node":"cd test && npm install && cd .. && mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"10.2.4","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"21.5.0","dependencies":{"@scure/bip32":"1.3.3","@scure/bip39":"1.2.2","@noble/curves":"1.3.0","@noble/hashes":"1.3.3"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.38.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.76.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"5.0.2","@types/node":"18.15.11","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10.0","@types/mocha":"9.1.1","@types/estree":"1.0.0","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_2.1.3_1706013098072_0.5082398156234313","host":"s3://npm-registry-packages"}},"2.2.0":{"name":"ethereum-cryptography","version":"2.2.0","keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standard","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","_id":"ethereum-cryptography@2.2.0","maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"url":"https://paulmillr.com","name":"Paul Miller"}],"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"dist":{"shasum":"06e2d9c0d89f98ffc6a83818f55bf85afecd50dc","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.2.0.tgz","fileCount":76,"integrity":"sha512-hsm9JhfytIf8QME/3B7j4bc8V+VdTU+Vas1aJlvIS96ffoNAosudXvGoEvWmc7QZYdkC8mrMJz9r0fcbw7GyCA==","signatures":[{"sig":"MEQCIA3Advh8uqkJOk1q7ZmhHhXGM/mswm6QAiXRS1A22gT+AiBsPRzhS5wU6IpCKLNNGm877WHfpqL/h1HkYuHDSoBbIw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84536},"main":"./index.js","types":"./index.d.ts","browser":{"crypto":false},"exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./bip39":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./hdkey":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./aes.js":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./keccak":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./scrypt":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./sha256":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./hdkey.js":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index.js":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./utils.js":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./keccak.js":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2.js":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random.js":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./ripemd160":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./scrypt.js":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./secp256k1":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./sha256.js":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512.js":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./blake2b.js":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./bip39/index":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./ripemd160.js":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./secp256k1.js":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./bip39/index.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./secp256k1-compat":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./secp256k1-compat.js":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./bip39/wordlists/czech":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/french":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/spanish":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/czech.js":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/japanese":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/french.js":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/korean.js":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/english.js":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/italian.js":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/portuguese":{"types":"./bip39/wordlists/portuguese.d.ts","import":"./esm/bip39/wordlists/portuguese.js","default":"./bip39/wordlists/portuguese.js"},"./bip39/wordlists/spanish.js":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/japanese.js":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/simplified-chinese":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"},"./bip39/wordlists/simplified-chinese.js":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/traditional-chinese.js":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"}},"gitHead":"41973ec776a6fef2350acede9187ad1a69c98edb","scripts":{"lint":"eslint","test":"npm-run-all test:node","build":"npm-run-all build:tsc","clean":"rimraf test/test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","prepare":"npm run build","lint:fix":"eslint --fix","build:tsc":"tsc --project tsconfig.prod.json && tsc --project tsconfig.prod.esm.json","test:node":"cd test && npm install && cd .. && mocha","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js"},"targets":{"parcel_tests":{"context":"browser"}},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"repository":{"url":"git+https://github.com/ethereum/js-ethereum-cryptography.git","type":"git"},"_npmVersion":"10.7.0","description":"All the cryptographic primitives used in Ethereum","directories":{},"sideEffects":false,"_nodeVersion":"22.1.0","dependencies":{"@scure/bip32":"1.4.0","@scure/bip39":"1.3.0","@noble/curves":"1.4.0","@noble/hashes":"1.4.0"},"_hasShrinkwrap":false,"devDependencies":{"karma":"6.4.0","mocha":"10.0.0","eslint":"8.38.0","parcel":"2.6.2","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","webpack":"5.76.0","prettier":"2.7.1","browserify":"17.0.0","typescript":"5.0.2","@types/node":"18.15.11","karma-mocha":"2.0.1","npm-run-all":"4.1.5","webpack-cli":"4.10.0","@types/mocha":"9.1.1","@types/estree":"1.0.0","karma-mocha-reporter":"2.2.5","karma-chrome-launcher":"3.1.1","eslint-plugin-prettier":"4.2.1","@rollup/plugin-commonjs":"22.0.1","@typescript-eslint/parser":"5.30.6","@rollup/plugin-node-resolve":"13.3.0","@typescript-eslint/eslint-plugin":"5.30.6"},"_npmOperationalInternal":{"tmp":"tmp/ethereum-cryptography_2.2.0_1717683453102_0.10866357354663703","host":"s3://npm-registry-packages"}},"2.2.1":{"name":"ethereum-cryptography","version":"2.2.1","description":"All the cryptographic primitives used in Ethereum","repository":{"type":"git","url":"git+https://github.com/ethereum/js-ethereum-cryptography.git"},"license":"MIT","main":"./index.js","dependencies":{"@noble/curves":"1.4.2","@noble/hashes":"1.4.0","@scure/bip32":"1.4.0","@scure/bip39":"1.3.0"},"exports":{".":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./aes":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./bip39":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./blake2b":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./hdkey":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./keccak":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./ripemd160":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./scrypt":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./secp256k1-compat":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./secp256k1":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./sha256":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./utils":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./bip39/index":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./bip39/wordlists/czech":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/english":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/french":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/italian":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/japanese":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/korean":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/portuguese":{"types":"./bip39/wordlists/portuguese.d.ts","import":"./esm/bip39/wordlists/portuguese.js","default":"./bip39/wordlists/portuguese.js"},"./bip39/wordlists/simplified-chinese":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/spanish":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/traditional-chinese":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"},"./aes.js":{"types":"./aes.d.ts","import":"./esm/aes.js","default":"./aes.js"},"./bip39.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./blake2b.js":{"types":"./blake2b.d.ts","import":"./esm/blake2b.js","default":"./blake2b.js"},"./hdkey.js":{"types":"./hdkey.d.ts","import":"./esm/hdkey.js","default":"./hdkey.js"},"./index.js":{"types":"./index.d.ts","import":"./esm/index.js","default":"./index.js"},"./keccak.js":{"types":"./keccak.d.ts","import":"./esm/keccak.js","default":"./keccak.js"},"./pbkdf2.js":{"types":"./pbkdf2.d.ts","import":"./esm/pbkdf2.js","default":"./pbkdf2.js"},"./random.js":{"types":"./random.d.ts","import":"./esm/random.js","default":"./random.js"},"./ripemd160.js":{"types":"./ripemd160.d.ts","import":"./esm/ripemd160.js","default":"./ripemd160.js"},"./scrypt.js":{"types":"./scrypt.d.ts","import":"./esm/scrypt.js","default":"./scrypt.js"},"./secp256k1-compat.js":{"types":"./secp256k1-compat.d.ts","import":"./esm/secp256k1-compat.js","default":"./secp256k1-compat.js"},"./secp256k1.js":{"types":"./secp256k1.d.ts","import":"./esm/secp256k1.js","default":"./secp256k1.js"},"./sha256.js":{"types":"./sha256.d.ts","import":"./esm/sha256.js","default":"./sha256.js"},"./sha512.js":{"types":"./sha512.d.ts","import":"./esm/sha512.js","default":"./sha512.js"},"./utils.js":{"types":"./utils.d.ts","import":"./esm/utils.js","default":"./utils.js"},"./bip39/index.js":{"types":"./bip39/index.d.ts","import":"./esm/bip39/index.js","default":"./bip39/index.js"},"./bip39/wordlists/czech.js":{"types":"./bip39/wordlists/czech.d.ts","import":"./esm/bip39/wordlists/czech.js","default":"./bip39/wordlists/czech.js"},"./bip39/wordlists/english.js":{"types":"./bip39/wordlists/english.d.ts","import":"./esm/bip39/wordlists/english.js","default":"./bip39/wordlists/english.js"},"./bip39/wordlists/french.js":{"types":"./bip39/wordlists/french.d.ts","import":"./esm/bip39/wordlists/french.js","default":"./bip39/wordlists/french.js"},"./bip39/wordlists/italian.js":{"types":"./bip39/wordlists/italian.d.ts","import":"./esm/bip39/wordlists/italian.js","default":"./bip39/wordlists/italian.js"},"./bip39/wordlists/japanese.js":{"types":"./bip39/wordlists/japanese.d.ts","import":"./esm/bip39/wordlists/japanese.js","default":"./bip39/wordlists/japanese.js"},"./bip39/wordlists/korean.js":{"types":"./bip39/wordlists/korean.d.ts","import":"./esm/bip39/wordlists/korean.js","default":"./bip39/wordlists/korean.js"},"./bip39/wordlists/simplified-chinese.js":{"types":"./bip39/wordlists/simplified-chinese.d.ts","import":"./esm/bip39/wordlists/simplified-chinese.js","default":"./bip39/wordlists/simplified-chinese.js"},"./bip39/wordlists/spanish.js":{"types":"./bip39/wordlists/spanish.d.ts","import":"./esm/bip39/wordlists/spanish.js","default":"./bip39/wordlists/spanish.js"},"./bip39/wordlists/traditional-chinese.js":{"types":"./bip39/wordlists/traditional-chinese.d.ts","import":"./esm/bip39/wordlists/traditional-chinese.js","default":"./bip39/wordlists/traditional-chinese.js"}},"browser":{"crypto":false},"sideEffects":false,"scripts":{"prepare":"npm run build","build":"npm-run-all build:tsc","build:tsc":"tsc --project tsconfig.prod.json && tsc --project tsconfig.prod.esm.json","test":"npm-run-all test:node","test:node":"cd test && npm install && cd .. && mocha","clean":"rimraf test/test-builds bip39 '*.js' '*.js.map' '*.d.ts' '*.d.ts.map' 'src/**/*.js'","lint":"eslint","lint:fix":"eslint --fix","browser-tests":"npm-run-all browser-tests:build browser-tests:test","browser-tests:build":"bash -x ./scripts/build-browser-tests.sh","browser-tests:test":"npm-run-all browser-tests:test-parcel browser-tests:test-browserify browser-tests:test-webpack browser-tests:test-rollup","browser-tests:test-parcel":"karma start --single-run --browsers ChromeHeadless test/karma.parcel.conf.js","browser-tests:test-browserify":"karma start --single-run --browsers ChromeHeadless test/karma.browserify.conf.js","browser-tests:test-webpack":"karma start --single-run --browsers ChromeHeadless test/karma.webpack.conf.js","browser-tests:test-rollup":"karma start --single-run --browsers ChromeHeadless test/karma.rollup.conf.js"},"devDependencies":{"@rollup/plugin-commonjs":"22.0.1","@rollup/plugin-node-resolve":"13.3.0","@types/estree":"1.0.0","@types/mocha":"9.1.1","@types/node":"18.15.11","@typescript-eslint/eslint-plugin":"5.30.6","@typescript-eslint/parser":"5.30.6","browserify":"17.0.0","eslint":"8.38.0","eslint-plugin-prettier":"4.2.1","karma":"6.4.0","karma-chrome-launcher":"3.1.1","karma-mocha":"2.0.1","karma-mocha-reporter":"2.2.5","mocha":"10.0.0","npm-run-all":"4.1.5","parcel":"2.6.2","prettier":"2.7.1","rimraf":"~3.0.2","rollup":"2.76.0","ts-node":"10.9.1","typescript":"5.5.2","webpack":"5.76.0","webpack-cli":"4.10.0"},"keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standard","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"name":"Paul Miller","url":"https://paulmillr.com"}],"targets":{"parcel_tests":{"context":"browser"}},"_id":"ethereum-cryptography@2.2.1","gitHead":"9faadf5f1dda4aa95cc675d927281862ac7bf7e7","types":"./index.d.ts","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","_nodeVersion":"22.1.0","_npmVersion":"10.7.0","dist":{"integrity":"sha512-r/W8lkHSiTLxUxW8Rf3u4HGB0xQweG2RyETjywylKZSzLWoWAijRz8WCuOtJ6wah+avllXBqZuk29HCCvhEIRg==","shasum":"58f2810f8e020aecb97de8c8c76147600b0b8ccf","tarball":"https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.2.1.tgz","fileCount":76,"unpackedSize":83700,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCWssPhsB1n7H6SgHg3Ruw4Td1dDSgT4gLjlILeRCyiRQIgTh+QH9zZfn0S1PSdUmPZ76t0Sf6b0V60AqxdnK2lh58="}]},"_npmUser":{"name":"paulmillr","email":"paul@paulmillr.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/ethereum-cryptography_2.2.1_1719848343352_0.9620712765123622"},"_hasShrinkwrap":false}},"time":{"created":"2019-09-04T21:06:10.216Z","modified":"2024-07-01T15:39:03.676Z","0.0.1":"2019-09-04T21:06:10.324Z","0.0.2":"2019-09-04T21:09:33.279Z","0.0.3":"2019-09-06T20:58:17.897Z","0.0.4":"2019-09-08T21:10:42.810Z","0.0.5":"2019-09-08T21:52:06.190Z","0.0.6":"2019-09-08T22:05:57.573Z","0.0.7":"2019-11-29T15:32:13.229Z","0.1.0":"2020-05-09T18:08:59.998Z","0.1.2":"2020-05-10T13:50:39.954Z","0.1.3":"2020-06-08T23:29:00.154Z","0.2.0":"2021-10-19T20:48:52.535Z","0.2.1":"2021-12-13T23:00:14.255Z","0.2.2":"2021-12-20T11:44:33.878Z","0.2.3":"2021-12-22T18:40:37.069Z","0.2.4":"2021-12-24T13:56:09.866Z","0.2.5":"2022-01-05T22:45:23.349Z","1.0.0-rc1":"2022-01-18T00:11:56.789Z","1.0.0":"2022-01-26T19:07:47.434Z","1.0.1":"2022-02-15T21:59:07.052Z","1.0.2":"2022-02-17T14:22:49.315Z","1.0.3":"2022-02-20T19:41:41.328Z","1.1.0":"2022-06-15T12:53:44.595Z","1.1.1":"2022-07-13T20:19:04.325Z","1.1.2":"2022-07-14T15:52:03.143Z","1.2.0":"2023-02-06T15:53:04.816Z","2.0.0":"2023-04-13T21:06:43.695Z","2.1.0":"2023-07-11T00:10:55.036Z","2.1.1":"2023-07-11T23:18:55.533Z","2.1.2":"2023-07-12T19:24:21.404Z","2.1.3":"2024-01-23T12:31:38.222Z","2.2.0":"2024-06-06T14:17:33.273Z","2.2.1":"2024-07-01T15:39:03.498Z"},"maintainers":[{"name":"alcuadrado","email":"email@patriciopalladino.com"},{"name":"paulmillr","email":"paul@paulmillr.com"}],"repository":{"type":"git","url":"git+https://github.com/ethereum/js-ethereum-cryptography.git"},"keywords":["ethereum","cryptography","digital signature","hash","encryption","prng","keccak","scrypt","pbkdf2","sha-256","ripemd-160","blake2b","aes","advanced encryption standard","secp256k1","ecdsa","bip32","hierarchical deterministic keys","hdwallet","hdkeys"],"license":"MIT","homepage":"https://github.com/ethereum/js-ethereum-cryptography#readme","bugs":{"url":"https://github.com/ethereum/js-ethereum-cryptography/issues"},"readme":"# ethereum-cryptography\n\n[![npm version][1]][2] [![license][3]][4]\n\n[Audited](#security) pure JS library containing all Ethereum-related cryptographic primitives.\n\nIncluded algorithms, implemented with just 5 [noble & scure](https://paulmillr.com/noble/) dependencies:\n\n* [Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b](#hashes-sha256-keccak-256-ripemd160-blake2b)\n* [KDFs: PBKDF2, Scrypt](#kdfs-pbkdf2-scrypt)\n* [CSPRNG (Cryptographically Secure Pseudorandom Number Generator)](#csprng-cryptographically-strong-pseudorandom-number-generator)\n* [secp256k1 elliptic curve](#secp256k1-curve)\n* [BIP32 HD Keygen](#bip32-hd-keygen)\n* [BIP39 Mnemonic phrases](#bip39-mnemonic-seed-phrase)\n* [AES Encryption](#aes-encryption)\n\n**April 2023 update:** v2.0 is out, switching\n[noble-secp256k1](https://github.com/paulmillr/noble-secp256k1) to\n[noble-curves](https://github.com/paulmillr/noble-curves),\nwhich changes re-exported api of `secp256k1` submodule.\nThere have been no other changes.\n\n**January 2022 update:** v1.0 has been released. We've rewritten the library from\nscratch and [audited](#security) it. It became **6x smaller:** ~5,000 lines of\ncode instead of ~24,000 (with all deps); 650KB instead of 10.2MB.\n5 dependencies by 1 author are now used, instead of 38 by 5 authors.\n\nCheck out [Upgrading](#upgrading) section and an article about the library:\n[A safer, smaller, and faster Ethereum cryptography stack](https://medium.com/nomic-labs-blog/a-safer-smaller-and-faster-ethereum-cryptography-stack-5eeb47f62d79).\n\n## Usage\n\nUse NPM / Yarn in node.js / browser:\n\n```bash\n# NPM\nnpm install ethereum-cryptography\n\n# Yarn\nyarn add ethereum-cryptography\n```\n\nSee [browser usage](#browser-usage) for information on using the package with major Javascript bundlers. It is\ntested with **Webpack, Rollup, Parcel and Browserify**.\n\nThis package has no single entry-point, but submodule for each cryptographic\nprimitive. Read each primitive's section of this document to learn how to use\nthem.\n\nThe reason for this is that importing everything from a single file will lead to\nhuge bundles when using this package for the web. This could be avoided through\ntree-shaking, but the possibility of it not working properly on one of\n[the supported bundlers](#browser-usage) is too high.\n\n```js\n// Hashes\nimport { sha256 } from \"ethereum-cryptography/sha256.js\";\nimport { keccak256 } from \"ethereum-cryptography/keccak.js\";\nimport { ripemd160 } from \"ethereum-cryptography/ripemd160.js\";\nimport { blake2b } from \"ethereum-cryptography/blake2b.js\";\n\n// KDFs\nimport { pbkdf2Sync } from \"ethereum-cryptography/pbkdf2.js\";\nimport { scryptSync } from \"ethereum-cryptography/scrypt.js\";\n\n// Random\nimport { getRandomBytesSync } from \"ethereum-cryptography/random.js\";\n\n// AES encryption\nimport { encrypt } from \"ethereum-cryptography/aes.js\";\n\n// secp256k1 elliptic curve operations\nimport { secp256k1 } from \"ethereum-cryptography/secp256k1.js\";\n\n// BIP32 HD Keygen, BIP39 Mnemonic Phrases\nimport { HDKey } from \"ethereum-cryptography/hdkey.js\";\nimport { generateMnemonic } from \"ethereum-cryptography/bip39/index.js\";\nimport { wordlist } from \"ethereum-cryptography/bip39/wordlists/english.js\";\n\n// utilities\nimport { hexToBytes, toHex, utf8ToBytes } from \"ethereum-cryptography/utils.js\";\n```\n\n## Hashes: SHA256, keccak-256, RIPEMD160, BLAKE2b\n```typescript\nfunction sha256(msg: Uint8Array): Uint8Array;\nfunction sha512(msg: Uint8Array): Uint8Array;\nfunction keccak256(msg: Uint8Array): Uint8Array;\nfunction ripemd160(msg: Uint8Array): Uint8Array;\nfunction blake2b(msg: Uint8Array, outputLength = 64): Uint8Array;\n```\n\nExposes following cryptographic hash functions:\n\n- SHA2 (SHA256, SHA512)\n- keccak-256 variant of SHA3 (also `keccak224`, `keccak384`,\nand `keccak512`)\n- RIPEMD160\n- BLAKE2b\n\n```js\nimport { sha256 } from \"ethereum-cryptography/sha256.js\";\nimport { sha512 } from \"ethereum-cryptography/sha512.js\";\nimport { keccak256, keccak224, keccak384, keccak512 } from \"ethereum-cryptography/keccak.js\";\nimport { ripemd160 } from \"ethereum-cryptography/ripemd160.js\";\nimport { blake2b } from \"ethereum-cryptography/blake2b.js\";\n\nsha256(Uint8Array.from([1, 2, 3]))\n\n// Can be used with strings\nimport { utf8ToBytes } from \"ethereum-cryptography/utils.js\";\nsha256(utf8ToBytes(\"abc\"))\n\n// If you need hex\nimport { bytesToHex as toHex } from \"ethereum-cryptography/utils.js\";\ntoHex(sha256(utf8ToBytes(\"abc\")))\n```\n\n## KDFs: PBKDF2, Scrypt\n\n```ts\nfunction pbkdf2(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Promise<Uint8Array>;\nfunction pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, digest: string): Uint8Array;\nfunction scrypt(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number, onProgress?: (progress: number) => void): Promise<Uint8Array>;\nfunction scryptSync(password: Uint8Array, salt: Uint8Array, N: number, p: number, r: number, dkLen: number, onProgress?: (progress: number) => void)): Uint8Array;\n```\n\nThe `pbkdf2` submodule has two functions implementing the PBKDF2 key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI. The KDF supports `sha256` and `sha512` digests.\n\nThe `scrypt` submodule has two functions implementing the Scrypt key\nderivation algorithm in synchronous and asynchronous ways. This algorithm is\nvery slow, and using the synchronous version in the browser is not recommended,\nas it will block its main thread and hang your UI.\n\nEncoding passwords is a frequent source of errors. Please read\n[these notes](https://github.com/ricmoo/scrypt-js/tree/0eb70873ddf3d24e34b53e0d9a99a0cef06a79c0#encoding-notes)\nbefore using these submodules.\n\n```js\nimport { pbkdf2 } from \"ethereum-cryptography/pbkdf2.js\";\nimport { utf8ToBytes } from \"ethereum-cryptography/utils.js\";\n// Pass Uint8Array, or convert strings to Uint8Array\nconsole.log(await pbkdf2(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 131072, 32, \"sha256\"));\n```\n\n```js\nimport { scrypt } from \"ethereum-cryptography/scrypt.js\";\nimport { utf8ToBytes } from \"ethereum-cryptography/utils.js\";\nconsole.log(await scrypt(utf8ToBytes(\"password\"), utf8ToBytes(\"salt\"), 262144, 8, 1, 32));\n```\n\n## CSPRNG (Cryptographically strong pseudorandom number generator)\n\n```ts\nfunction getRandomBytes(bytes: number): Promise<Uint8Array>;\nfunction getRandomBytesSync(bytes: number): Uint8Array;\n```\n\nThe `random` submodule has functions to generate cryptographically strong\npseudo-random data in synchronous and asynchronous ways.\n\nBacked by [`crypto.getRandomValues`](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues) in browser and by [`crypto.randomBytes`](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback) in node.js. If backends are somehow not available, the module would throw an error and won't work, as keeping them working would be insecure.\n\n```js\nimport { getRandomBytesSync } from \"ethereum-cryptography/random.js\";\nconsole.log(getRandomBytesSync(32));\n```\n\n## secp256k1 curve\n\n```ts\nfunction getPublicKey(privateKey: Uint8Array, isCompressed = true): Uint8Array;\nfunction sign(msgHash: Uint8Array, privateKey: Uint8Array): { r: bigint; s: bigint; recovery: number };\nfunction verify(signature: Uint8Array, msgHash: Uint8Array, publicKey: Uint8Array): boolean\nfunction getSharedSecret(privateKeyA: Uint8Array, publicKeyB: Uint8Array): Uint8Array;\nfunction utils.randomPrivateKey(): Uint8Array;\n```\n\nThe `secp256k1` submodule provides a library for elliptic curve operations on\nthe curve secp256k1. For detailed documentation, follow [README of `noble-curves`](https://github.com/paulmillr/noble-curves), which the module uses as a backend.\n\nsecp256k1 private keys need to be cryptographically secure random numbers with\ncertain characteristics. If this is not the case, the security of secp256k1 is\ncompromised. We strongly recommend using `utils.randomPrivateKey()` to generate them.\n\n```js\nimport { secp256k1 } from \"ethereum-cryptography/secp256k1.js\";\n(async () => {\n  // You pass either a hex string, or Uint8Array\n  const privateKey = \"6b911fd37cdf5c81d4c0adb1ab7fa822ed253ab0ad9aa18d77257c88b29b718e\";\n  const messageHash = \"a33321f98e4ff1c283c76998f14f57447545d339b3db534c6d886decb4209f28\";\n  const publicKey = secp256k1.getPublicKey(privateKey);\n  const signature = secp256k1.sign(messageHash, privateKey);\n  const isSigned = secp256k1.verify(signature, messageHash, publicKey);\n})();\n```\n\nWe're also providing a compatibility layer for users who want to upgrade\nfrom `tiny-secp256k1` or `secp256k1` modules without hassle.\nCheck out [secp256k1 compatibility layer](#legacy-secp256k1-compatibility-layer).\n\n## BIP32 HD Keygen\n\nHierarchical deterministic (HD) wallets that conform to BIP32 standard.\nAlso available as standalone package [scure-bip32](https://github.com/paulmillr/scure-bip32).\n\nThis module exports a single class `HDKey`, which should be used like this:\n\n```ts\nimport { HDKey } from \"ethereum-cryptography/hdkey.js\";\nconst hdkey1 = HDKey.fromMasterSeed(seed);\nconst hdkey2 = HDKey.fromExtendedKey(base58key);\nconst hdkey3 = HDKey.fromJSON({ xpriv: string });\n\n// props\n[hdkey1.depth, hdkey1.index, hdkey1.chainCode];\nconsole.log(hdkey2.privateKey, hdkey2.publicKey);\nconsole.log(hdkey3.derive(\"m/0/2147483647'/1\"));\nconst sig = hdkey3.sign(hash);\nhdkey3.verify(hash, sig);\n```\n\nNote: `chainCode` property is essentially a private part\nof a secret \"master\" key, it should be guarded from unauthorized access.\n\nThe full API is:\n\n```ts\nclass HDKey {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions): HDKey;\n  public static fromExtendedKey(base58key: string, versions: Versions): HDKey;\n  public static fromJSON(json: { xpriv: string }): HDKey;\n\n  readonly versions: Versions;\n  readonly depth: number = 0;\n  readonly index: number = 0;\n  readonly chainCode: Uint8Array | null = null;\n  readonly parentFingerprint: number = 0;\n\n  get fingerprint(): number;\n  get identifier(): Uint8Array | undefined;\n  get pubKeyHash(): Uint8Array | undefined;\n  get privateKey(): Uint8Array | null;\n  get publicKey(): Uint8Array | null;\n  get privateExtendedKey(): string;\n  get publicExtendedKey(): string;\n\n  derive(path: string): HDKey;\n  deriveChild(index: number): HDKey;\n  sign(hash: Uint8Array): Uint8Array;\n  verify(hash: Uint8Array, signature: Uint8Array): boolean;\n  wipePrivateData(): this;\n}\n\ninterface Versions {\n  private: number;\n  public: number;\n}\n```\n\nThe `hdkey` submodule provides a library for keys derivation according to\n[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki).\n\nIt has almost the exact same API than the version `1.x` of\n[`hdkey` from cryptocoinjs](https://github.com/cryptocoinjs/hdkey),\nbut it's backed by this package's primitives, and has built-in TypeScript types.\nIts only difference is that it has to be used with a named import.\nThe implementation is [loosely based on hdkey, which has MIT License](#LICENSE).\n\n## BIP39 Mnemonic Seed Phrase\n\n```ts\nfunction generateMnemonic(wordlist: string[], strength: number = 128): string;\nfunction mnemonicToEntropy(mnemonic: string, wordlist: string[]): Uint8Array;\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist: string[]): string;\nfunction validateMnemonic(mnemonic: string, wordlist: string[]): boolean;\nasync function mnemonicToSeed(mnemonic: string, passphrase: string = \"\"): Promise<Uint8Array>;\nfunction mnemonicToSeedSync(mnemonic: string, passphrase: string = \"\"): Uint8Array;\n```\n\nThe `bip39` submodule provides functions to generate, validate and use seed\nrecovery phrases according to [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n\nAlso available as standalone package [scure-bip39](https://github.com/paulmillr/scure-bip39).\n\n```js\nimport { generateMnemonic } from \"ethereum-cryptography/bip39/index.js\";\nimport { wordlist } from \"ethereum-cryptography/bip39/wordlists/english.js\";\nconsole.log(generateMnemonic(wordlist));\n```\n\nThis submodule also contains the word lists defined by BIP39 for Czech, English,\nFrench, Italian, Japanese, Korean, Simplified and Traditional Chinese, and\nSpanish. These are not imported by default, as that would increase bundle sizes\ntoo much. Instead, you should import and use them explicitly.\n\nThe word lists are exported as a `wordlist` variable in each of these submodules:\n\n* `ethereum-cryptography/bip39/wordlists/czech.js`\n* `ethereum-cryptography/bip39/wordlists/english.js`\n* `ethereum-cryptography/bip39/wordlists/french.js`\n* `ethereum-cryptography/bip39/wordlists/italian.js`\n* `ethereum-cryptography/bip39/wordlists/japanese.js`\n* `ethereum-cryptography/bip39/wordlists/korean.js`\n* `ethereum-cryptography/bip39/wordlists/portuguese.js`\n* `ethereum-cryptography/bip39/wordlists/simplified-chinese.js`\n* `ethereum-cryptography/bip39/wordlists/spanish.js`\n* `ethereum-cryptography/bip39/wordlists/traditional-chinese.js`\n\n## AES Encryption\n\n```ts\nfunction encrypt(msg: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\nfunction decrypt(cypherText: Uint8Array, key: Uint8Array, iv: Uint8Array, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true): Promise<Uint8Array>;\n```\n\nThe `aes` submodule contains encryption and decryption functions implementing\nthe [Advanced Encryption Standard](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\nalgorithm.\n\n### Encrypting with passwords\n\nAES is not supposed to be used directly with a password. Doing that will\ncompromise your users' security.\n\nThe `key` parameters in this submodule are meant to be strong cryptographic\nkeys. If you want to obtain such a key from a password, please use a\n[key derivation function](https://en.wikipedia.org/wiki/Key_derivation_function)\nlike [pbkdf2](#kdfs-pbkdf2-scrypt) or [scrypt](#kdfs-pbkdf2-scrypt).\n\n### Operation modes\n\nThis submodule works with different [block cipher modes of operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation). If you are using this module in a new\napplication, we recommend using the default.\n\nWhile this module may work with any mode supported by OpenSSL, we only test it\nwith `aes-128-ctr`, `aes-128-cbc`, and `aes-256-cbc`. If you use another module\na warning will be printed in the console.\n\nWe only recommend using `aes-128-cbc` and `aes-256-cbc` to decrypt already\nencrypted data.\n\n### Padding plaintext messages\n\nSome operation modes require the plaintext message to be a multiple of `16`. If\nthat isn't the case, your message has to be padded.\n\nBy default, this module automatically pads your messages according to [PKCS#7](https://tools.ietf.org/html/rfc2315).\nNote that this padding scheme always adds at least 1 byte of padding. If you\nare unsure what anything of this means, we **strongly** recommend you to use\nthe defaults.\n\nIf you need to encrypt without padding or want to use another padding scheme,\nyou can disable PKCS#7 padding by passing `false` as the last argument and\nhandling padding yourself. Note that if you do this and your operation mode\nrequires padding, `encrypt` will throw if your plaintext message isn't a\nmultiple of `16`.\n\nThis option is only present to enable the decryption of already encrypted data.\nTo encrypt new data, we recommend using the default.\n\n### How to use the IV parameter\n\nThe `iv` parameter of the `encrypt` function must be unique, or the security\nof the encryption algorithm can be compromised.\n\nYou can generate a new `iv` using the `random` module.\n\nNote that to decrypt a value, you have to provide the same `iv` used to encrypt\nit.\n\n### How to handle errors with this module\n\nSensitive information can be leaked via error messages when using this module.\nTo avoid this, you should make sure that the errors you return don't\ncontain the exact reason for the error. Instead, errors must report general\nencryption/decryption failures.\n\nNote that implementing this can mean catching all errors that can be thrown\nwhen calling on of this module's functions, and just throwing a new generic\nexception.\n\n### Example usage\n\n```js\nimport { encrypt } from \"ethereum-cryptography/aes.js\";\nimport { hexToBytes, utf8ToBytes } from \"ethereum-cryptography/utils.js\";\n\nconsole.log(\n  encrypt(\n    utf8ToBytes(\"message\"),\n    hexToBytes(\"2b7e151628aed2a6abf7158809cf4f3c\"),\n    hexToBytes(\"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\")\n  )\n);\n```\n\n## Browser usage\n\n### Rollup setup\n\nUsing this library with Rollup requires the following plugins:\n\n* [`@rollup/plugin-commonjs`](https://www.npmjs.com/package/@rollup/plugin-commonjs)\n* [`@rollup/plugin-node-resolve`](https://www.npmjs.com/package/@rollup/plugin-node-resolve)\n\nThese can be used by setting your `plugins` array like this:\n\n```js\n  plugins: [\n    commonjs(),\n    resolve({\n      browser: true,\n      preferBuiltins: false,\n    }),\n  ]\n```\n\n## Legacy secp256k1 compatibility layer\n\n**Warning:** use `secp256k1` instead. This module is only for users who upgraded\nfrom ethereum-cryptography v0.1. It could be removed in the future.\n\nThe API of `secp256k1-compat` is the same as [secp256k1-node](https://github.com/cryptocoinjs/secp256k1-node):\n\n```js\nimport { createPrivateKeySync, ecdsaSign } from \"ethereum-cryptography/secp256k1-compat\";\nconst msgHash = Uint8Array.from(\n  \"82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28\",\n  \"hex\"\n);\nconst privateKey = createPrivateKeySync();\nconsole.log(Uint8Array.from(ecdsaSign(msgHash, privateKey).signature));\n```\n\n## Missing cryptographic primitives\n\nThis package intentionally excludes the cryptographic primitives necessary\nto implement the following EIPs:\n\n* [EIP 196: Precompiled contracts for addition and scalar multiplication on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-196)\n* [EIP 197: Precompiled contracts for optimal ate pairing check on the elliptic curve alt_bn128](https://eips.ethereum.org/EIPS/eip-197)\n* [EIP 198: Big integer modular exponentiation](https://eips.ethereum.org/EIPS/eip-198)\n* [EIP 152: Add Blake2 compression function `F` precompile](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)\n\nFeel free to open an issue if you want this decision to be reconsidered, or if\nyou found another primitive that is missing.\n\n## Upgrading\n\nUpgrading from 1.0 to 2.0:\n\n1. `secp256k1` module was changed massively:\n  before, it was using [noble-secp256k1 1.7](https://github.com/paulmillr/noble-secp256k1);\n  now it uses safer [noble-curves](https://github.com/paulmillr/noble-curves). Please refer\n  to [upgrading section from curves README](https://github.com/paulmillr/noble-curves#upgrading).\n  Main changes to keep in mind: a) `sign` now returns `Signature` instance\n  b) `recoverPublicKey` got moved onto a `Signature` instance\n2. node.js 14 and older support was dropped. Upgrade to node.js 16 or later.\n\nUpgrading from 0.1 to 1.0: **Same functionality**, all old APIs remain the same except for the breaking changes:\n\n1. We return `Uint8Array` from all methods that worked with `Buffer` before.\n`Buffer` has never been supported in browsers, while `Uint8Array`s are supported natively in both\nbrowsers and node.js.\n2. We target runtimes with [bigint](https://caniuse.com/bigint) support,\nwhich is Chrome 67+, Edge 79+, Firefox 68+, Safari 14+, node.js 10+. If you need to support older runtimes, use `ethereum-cryptography@0.1`\n3. If you've used `secp256k1`, [rename it to `secp256k1-compat`](#legacy-secp256k1-compatibility-layer)\n\n```js\nimport { sha256 } from \"ethereum-cryptography/sha256.js\";\n\n// Old usage\nconst hasho = sha256(Buffer.from(\"string\", \"utf8\")).toString(\"hex\");\n\n// New usage\nimport { toHex } from \"ethereum-cryptography/utils.js\";\nconst hashn = toHex(sha256(\"string\"));\n\n// If you have `Buffer` module and want to preserve it:\nconst hashb = Buffer.from(sha256(\"string\"));\nconst hashbo = hashb.toString(\"hex\");\n```\n\n## Security\n\nAudited by Cure53 on Jan 5, 2022. Check out the audit [PDF](./audit/2022-01-05-cure53-audit-nbl2.pdf) & [URL](https://cure53.de/pentest-report_hashing-libs.pdf).\n\n## License\n\n`ethereum-cryptography` is released under The MIT License (MIT)\n\nCopyright (c) 2021 Patricio Palladino, Paul Miller, ethereum-cryptography contributors\n\nSee [LICENSE](./LICENSE) file.\n\n`hdkey` is loosely based on [hdkey](https://github.com/cryptocoinjs/hdkey),\nwhich had [MIT License](https://github.com/cryptocoinjs/hdkey/blob/3f3c0b5cedb98f971835b5116ebea05b3c09422a/LICENSE)\n\nCopyright (c) 2018 cryptocoinjs\n\n[1]: https://img.shields.io/npm/v/ethereum-cryptography.svg\n[2]: https://www.npmjs.com/package/ethereum-cryptography\n[3]: https://img.shields.io/npm/l/ethereum-cryptography\n[4]: https://github.com/ethereum/js-ethereum-cryptography/blob/master/packages/ethereum-cryptography/LICENSE\n","readmeFilename":"README.md","contributors":[{"name":"Patricio Palladino","email":"patricio@nomiclabs.io"},{"name":"Paul Miller","url":"https://paulmillr.com"}]}